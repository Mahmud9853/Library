{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../user.service\";\nimport * as i4 from \"@angular/common\";\nfunction ChangeRoleComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const role_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", role_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", role_r1, \" \");\n  }\n}\nexport class ChangeRoleComponent {\n  constructor(fb, route,\n  // ActivatedRoute ile URL parametrelerini alacağız\n  userService // API çağrısı için servis\n  ) {\n    this.fb = fb;\n    this.route = route;\n    this.userService = userService;\n    this.availableRoles = [];\n    this.userId = null;\n    this.errorMessage = null;\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required] // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId');\n      if (this.userId) {\n        this.loadRoles(); // Rolleri burada yükle\n      }\n    });\n  }\n  // Rolleri API'den alıyoruz\n  loadRoles() {\n    this.userService.getAvailableRoles().subscribe(roles => {\n      this.availableRoles = roles; // Roller dizisini güncelliyoruz\n    }, error => {\n      this.errorMessage = 'Unable to load roles.';\n    });\n  }\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  loadRoles() {\n    this.userService.getAvailableRoles().subscribe(roles => {\n      console.log('Roles:', roles); // Roller konsolda görünecek\n      this.availableRoles = roles;\n    }, error => {\n      console.error('Error loading roles:', error);\n      this.errorMessage = 'Unable to load roles.';\n    });\n  }\n  static {\n    this.ɵfac = function ChangeRoleComponent_Factory(t) {\n      return new (t || ChangeRoleComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.UserService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChangeRoleComponent,\n      selectors: [[\"app-change-role\"]],\n      decls: 5,\n      vars: 1,\n      consts: [[1, \"mb-3\"], [\"for\", \"roles\", 1, \"form-label\"], [\"id\", \"roles\", \"formControlName\", \"roles\", \"multiple\", \"\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n      template: function ChangeRoleComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n          i0.ɵɵtext(2, \"Select Roles:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"select\", 2);\n          i0.ɵɵtemplate(4, ChangeRoleComponent_option_4_Template, 2, 2, \"option\", 3);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableRoles);\n        }\n      },\n      dependencies: [i4.NgForOf, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectMultipleControlValueAccessor, i1.NgControlStatus, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","role_r1","ɵɵadvance","ɵɵtextInterpolate1","ChangeRoleComponent","constructor","fb","route","userService","availableRoles","userId","errorMessage","changeRoleForm","group","roles","required","ngOnInit","paramMap","subscribe","params","get","loadRoles","getAvailableRoles","error","console","log","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","i3","UserService","selectors","decls","vars","consts","template","ChangeRoleComponent_Template","rf","ctx","ɵɵtemplate","ChangeRoleComponent_option_4_Template"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\change-role\\change-role.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\change-role\\change-role.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})\nexport class ChangeRoleComponent implements OnInit {\n  changeRoleForm: FormGroup; \n  availableRoles: string[] = [];\n  userId: string | null = null;\n  errorMessage: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,  // ActivatedRoute ile URL parametrelerini alacağız\n    private userService: UserService  // API çağrısı için servis\n  ) {\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required]  // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId');\n      if (this.userId) {\n        this.loadRoles(); // Rolleri burada yükle\n      }\n    });\n  }\n\n  // Rolleri API'den alıyoruz\n  loadRoles(): void {\n    this.userService.getAvailableRoles().subscribe(\n      (roles) => {\n        this.availableRoles = roles;  // Roller dizisini güncelliyoruz\n      },\n      (error) => {\n        this.errorMessage = 'Unable to load roles.';\n      }\n    );\n  }\n\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  loadRoles(): void {\n    this.userService.getAvailableRoles().subscribe(\n      (roles) => {\n        console.log('Roles:', roles); // Roller konsolda görünecek\n        this.availableRoles = roles;\n      },\n      (error) => {\n        console.error('Error loading roles:', error);\n        this.errorMessage = 'Unable to load roles.';\n      }\n    );\n  }\n  \n}\n","<div class=\"mb-3\">\n    <label for=\"roles\" class=\"form-label\">Select Roles:</label>\n    <select class=\"form-select\" id=\"roles\" formControlName=\"roles\" multiple>\n      <option *ngFor=\"let role of availableRoles\" [value]=\"role\">\n        {{ role }}\n      </option>\n    </select>\n</div>\n  "],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICE7DC,EAAA,CAAAC,cAAA,gBAA2D;IACzDD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAFmCH,EAAA,CAAAI,UAAA,UAAAC,OAAA,CAAc;IACxDL,EAAA,CAAAM,SAAA,GACF;IADEN,EAAA,CAAAO,kBAAA,MAAAF,OAAA,MACF;;;ADKN,OAAM,MAAOG,mBAAmB;EAM9BC,YACUC,EAAe,EACfC,KAAqB;EAAG;EACxBC,WAAwB,CAAE;EAAA,E;IAF1B,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IAPrB,KAAAC,cAAc,GAAa,EAAE;IAC7B,KAAAC,MAAM,GAAkB,IAAI;IAC5B,KAAAC,YAAY,GAAkB,IAAI;IAOhC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACoB,QAAQ,CAAC,CAAE;KACnC,CAAC;EACJ;;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACT,MAAM,GAAGS,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;MAClC,IAAI,IAAI,CAACV,MAAM,EAAE;QACf,IAAI,CAACW,SAAS,EAAE,CAAC,CAAC;;IAEtB,CAAC,CAAC;EACJ;EAEA;EACAA,SAASA,CAAA;IACP,IAAI,CAACb,WAAW,CAACc,iBAAiB,EAAE,CAACJ,SAAS,CAC3CJ,KAAK,IAAI;MACR,IAAI,CAACL,cAAc,GAAGK,KAAK,CAAC,CAAE;IAChC,CAAC,EACAS,KAAK,IAAI;MACR,IAAI,CAACZ,YAAY,GAAG,uBAAuB;IAC7C,CAAC,CACF;EACH;EAEA;EACAU,SAASA,CAAA;IACP,IAAI,CAACb,WAAW,CAACc,iBAAiB,EAAE,CAACJ,SAAS,CAC3CJ,KAAK,IAAI;MACRU,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEX,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAI,CAACL,cAAc,GAAGK,KAAK;IAC7B,CAAC,EACAS,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,IAAI,CAACZ,YAAY,GAAG,uBAAuB;IAC7C,CAAC,CACF;EACH;;;uBAjDWP,mBAAmB,EAAAR,EAAA,CAAA8B,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAhC,EAAA,CAAA8B,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAAlC,EAAA,CAAA8B,iBAAA,CAAAK,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAnB5B,mBAAmB;MAAA6B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCVhC3C,EAAA,CAAAC,cAAA,aAAkB;UACwBD,EAAA,CAAAE,MAAA,oBAAa;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAC3DH,EAAA,CAAAC,cAAA,gBAAwE;UACtED,EAAA,CAAA6C,UAAA,IAAAC,qCAAA,oBAES;UACX9C,EAAA,CAAAG,YAAA,EAAS;;;UAHkBH,EAAA,CAAAM,SAAA,GAAiB;UAAjBN,EAAA,CAAAI,UAAA,YAAAwC,GAAA,CAAA/B,cAAA,CAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}