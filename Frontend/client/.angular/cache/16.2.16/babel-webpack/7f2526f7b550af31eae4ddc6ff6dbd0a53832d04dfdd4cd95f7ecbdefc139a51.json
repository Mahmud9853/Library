{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, http, router) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.registrationError = null;\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      birthDate: ['', Validators.required]\n    });\n  }\n  // Formu gönderme işlemi\n  register() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    // API URL'yi ve payload'ı belirleyin\n    const payload = {\n      name: this.registerForm.value.name,\n      surname: this.registerForm.value.surname,\n      email: this.registerForm.value.email,\n      birthDate: this.registerForm.value.birthDate\n    };\n    this.http.post('https://localhost:7185/api/Account/register', payload).subscribe({\n      next: response => {\n        // Başarıyla kayıt olunduğunda\n        console.log('Registration successful', response);\n        this.router.navigate(['/login']); // Login sayfasına yönlendir\n      },\n\n      error: error => {\n        // Hata olduğunda\n        if (error.status === 400) {\n          this.registrationError = 'Registration failed. Please check the data and try again.';\n        } else {\n          this.registrationError = 'An error occurred. Please try again later.';\n        }\n        console.error('Registration error', error);\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);","map":{"version":3,"names":["Component","RegisterComponent","constructor","formBuilder","http","router","registrationError","ngOnInit","registerForm","group","name","Validators","required","surname","email","birthDate","register","invalid","payload","value","post","subscribe","next","response","console","log","navigate","error","status","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  registrationError: string | null = null;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      birthDate: ['', Validators.required]\n    });\n  }\n\n  // Formu gönderme işlemi\n  register(): void {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    // API URL'yi ve payload'ı belirleyin\n    const payload = {\n      name: this.registerForm.value.name,\n      surname: this.registerForm.value.surname,\n      email: this.registerForm.value.email,\n      birthDate: this.registerForm.value.birthDate\n    };\n\n    this.http.post('https://localhost:7185/api/Account/register', payload)\n      .subscribe({\n        next: (response) => {\n          // Başarıyla kayıt olunduğunda\n          console.log('Registration successful', response);\n          this.router.navigate(['/login']); // Login sayfasına yönlendir\n        },\n        error: (error) => {\n          // Hata olduğunda\n          if (error.status === 400) {\n            this.registrationError = 'Registration failed. Please check the data and try again.';\n          } else {\n            this.registrationError = 'An error occurred. Please try again later.';\n          }\n          console.error('Registration error', error);\n        }\n      });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YACUC,WAAwB,EACxBC,IAAgB,EAChBC,MAAc;IAFd,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,iBAAiB,GAAkB,IAAI;EAMpC;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACzCC,IAAI,EAAE,CAAC,EAAE,EAAEC,UAAU,CAACC,QAAQ,CAAC;MAC/BC,OAAO,EAAE,CAAC,EAAE,EAAEF,UAAU,CAACC,QAAQ,CAAC;MAClCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACH,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACG,KAAK,CAAC,CAAC;MACpDC,SAAS,EAAE,CAAC,EAAE,EAAEJ,UAAU,CAACC,QAAQ;KACpC,CAAC;EACJ;EAEA;EACAI,QAAQA,CAAA;IACN,IAAI,IAAI,CAACR,YAAY,CAACS,OAAO,EAAE;MAC7B;;IAGF;IACA,MAAMC,OAAO,GAAG;MACdR,IAAI,EAAE,IAAI,CAACF,YAAY,CAACW,KAAK,CAACT,IAAI;MAClCG,OAAO,EAAE,IAAI,CAACL,YAAY,CAACW,KAAK,CAACN,OAAO;MACxCC,KAAK,EAAE,IAAI,CAACN,YAAY,CAACW,KAAK,CAACL,KAAK;MACpCC,SAAS,EAAE,IAAI,CAACP,YAAY,CAACW,KAAK,CAACJ;KACpC;IAED,IAAI,CAACX,IAAI,CAACgB,IAAI,CAAC,6CAA6C,EAAEF,OAAO,CAAC,CACnEG,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB;QACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;QAChD,IAAI,CAAClB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC;;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf;QACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB,IAAI,CAACtB,iBAAiB,GAAG,2DAA2D;SACrF,MAAM;UACL,IAAI,CAACA,iBAAiB,GAAG,4CAA4C;;QAEvEkB,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;KACD,CAAC;EACN;CACD;AAnDY1B,iBAAiB,GAAA4B,UAAA,EAL7B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACW/B,iBAAiB,CAmD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}