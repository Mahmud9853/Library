{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../user.service\";\nfunction ChangeRoleComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const role_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", role_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(role_r2);\n  }\n}\nfunction ChangeRoleComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorMessage, \" \");\n  }\n}\nexport class ChangeRoleComponent {\n  constructor(fb, route,\n  // ActivatedRoute ile URL parametrelerini alacağız\n  userService // API çağrısı için servis\n  ) {\n    this.fb = fb;\n    this.route = route;\n    this.userService = userService;\n    this.availableRoles = [];\n    this.userId = null;\n    this.errorMessage = null;\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required] // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit() {\n    // URL'den userId'yi alıyoruz\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId'); // URL'deki parametreyi alıyoruz\n      if (this.userId) {\n        this.loadRoles(); // Kullanıcı ID'si varsa, roller alınacak\n      }\n    });\n  }\n  // Rolleri API'den alıyoruz\n  loadRoles() {\n    this.userService.getAvailableRoles().subscribe(roles => {\n      this.availableRoles = roles; // Roller dizisini güncelliyoruz\n    }, error => {\n      this.errorMessage = 'Unable to load roles.';\n    });\n  }\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  onSubmit() {\n    if (this.changeRoleForm.invalid) {\n      return;\n    }\n    const formData = this.changeRoleForm.value;\n    if (this.userId) {\n      this.userService.changeUserRole(this.userId, formData.roles).subscribe(response => {\n        alert(response.message); // Başarılı olursa kullanıcıya bildirim\n      }, error => {\n        this.errorMessage = 'Unable to update role.';\n      });\n    }\n  }\n  static {\n    this.ɵfac = function ChangeRoleComponent_Factory(t) {\n      return new (t || ChangeRoleComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.UserService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChangeRoleComponent,\n      selectors: [[\"app-change-role\"]],\n      decls: 12,\n      vars: 4,\n      consts: [[1, \"container\", \"mt-5\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"roles\", 1, \"form-label\"], [\"formControlName\", \"roles\", \"id\", \"roles\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [3, \"value\"], [1, \"alert\", \"alert-danger\"]],\n      template: function ChangeRoleComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function ChangeRoleComponent_Template_form_ngSubmit_1_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(2, \"h2\");\n          i0.ɵɵtext(3, \"Change User Role\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Select Role:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"select\", 4);\n          i0.ɵɵtemplate(8, ChangeRoleComponent_option_8_Template, 2, 2, \"option\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, ChangeRoleComponent_div_9_Template, 2, 1, \"div\", 6);\n          i0.ɵɵelementStart(10, \"button\", 7);\n          i0.ɵɵtext(11, \" Update Role \");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.changeRoleForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableRoles);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.changeRoleForm.invalid);\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","role_r2","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate1","ctx_r1","errorMessage","ChangeRoleComponent","constructor","fb","route","userService","availableRoles","userId","changeRoleForm","group","roles","required","ngOnInit","paramMap","subscribe","params","get","loadRoles","getAvailableRoles","error","onSubmit","invalid","formData","value","changeUserRole","response","alert","message","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","i3","UserService","selectors","decls","vars","consts","template","ChangeRoleComponent_Template","rf","ctx","ɵɵlistener","ChangeRoleComponent_Template_form_ngSubmit_1_listener","ɵɵtemplate","ChangeRoleComponent_option_8_Template","ChangeRoleComponent_div_9_Template"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\change-role\\change-role.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\change-role\\change-role.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})\nexport class ChangeRoleComponent implements OnInit {\n  changeRoleForm: FormGroup; \n  availableRoles: string[] = [];\n  userId: string | null = null;\n  errorMessage: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,  // ActivatedRoute ile URL parametrelerini alacağız\n    private userService: UserService  // API çağrısı için servis\n  ) {\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required]  // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit(): void {\n    // URL'den userId'yi alıyoruz\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId');  // URL'deki parametreyi alıyoruz\n      if (this.userId) {\n        this.loadRoles();  // Kullanıcı ID'si varsa, roller alınacak\n      }\n    });\n  }\n\n  // Rolleri API'den alıyoruz\n  loadRoles(): void {\n    this.userService.getAvailableRoles().subscribe(\n      (roles) => {\n        this.availableRoles = roles;  // Roller dizisini güncelliyoruz\n      },\n      (error) => {\n        this.errorMessage = 'Unable to load roles.';\n      }\n    );\n  }\n\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  onSubmit(): void {\n    if (this.changeRoleForm.invalid) {\n      return;\n    }\n\n    const formData = this.changeRoleForm.value;\n    if (this.userId) {\n      this.userService.changeUserRole(this.userId, formData.roles).subscribe(\n        (response) => {\n          alert(response.message);  // Başarılı olursa kullanıcıya bildirim\n        },\n        (error) => {\n          this.errorMessage = 'Unable to update role.';\n        }\n      );\n    }\n  }\n}\n","<div class=\"container mt-5\">\n    <form [formGroup]=\"changeRoleForm\" (ngSubmit)=\"onSubmit()\">\n      <h2>Change User Role</h2>\n    \n      <!-- Select Roles -->\n      <div class=\"mb-3\">\n        <label for=\"roles\" class=\"form-label\">Select Role:</label>\n        <select class=\"form-control\" formControlName=\"roles\" id=\"roles\">\n          <option *ngFor=\"let role of availableRoles\" [value]=\"role\">{{ role }}</option>\n        </select>\n      </div>\n    \n      <!-- Error Message -->\n      <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n        {{ errorMessage }}\n      </div>\n    \n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"changeRoleForm.invalid\">\n        Update Role\n      </button>\n    </form>\n  </div>\n  "],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICOzDC,EAAA,CAAAC,cAAA,gBAA2D;IAAAD,EAAA,CAAAE,MAAA,GAAU;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAAlCH,EAAA,CAAAI,UAAA,UAAAC,OAAA,CAAc;IAACL,EAAA,CAAAM,SAAA,GAAU;IAAVN,EAAA,CAAAO,iBAAA,CAAAF,OAAA,CAAU;;;;;IAKzEL,EAAA,CAAAC,cAAA,aAAqD;IACnDD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;IADJH,EAAA,CAAAM,SAAA,GACF;IADEN,EAAA,CAAAQ,kBAAA,MAAAC,MAAA,CAAAC,YAAA,MACF;;;ADLN,OAAM,MAAOC,mBAAmB;EAM9BC,YACUC,EAAe,EACfC,KAAqB;EAAG;EACxBC,WAAwB,CAAE;EAAA,E;IAF1B,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IAPrB,KAAAC,cAAc,GAAa,EAAE;IAC7B,KAAAC,MAAM,GAAkB,IAAI;IAC5B,KAAAP,YAAY,GAAkB,IAAI;IAOhC,IAAI,CAACQ,cAAc,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACsB,QAAQ,CAAC,CAAE;KACnC,CAAC;EACJ;;EAEAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACR,KAAK,CAACS,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACR,MAAM,GAAGQ,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAE;MACrC,IAAI,IAAI,CAACT,MAAM,EAAE;QACf,IAAI,CAACU,SAAS,EAAE,CAAC,CAAE;;IAEvB,CAAC,CAAC;EACJ;EAEA;EACAA,SAASA,CAAA;IACP,IAAI,CAACZ,WAAW,CAACa,iBAAiB,EAAE,CAACJ,SAAS,CAC3CJ,KAAK,IAAI;MACR,IAAI,CAACJ,cAAc,GAAGI,KAAK,CAAC,CAAE;IAChC,CAAC,EACAS,KAAK,IAAI;MACR,IAAI,CAACnB,YAAY,GAAG,uBAAuB;IAC7C,CAAC,CACF;EACH;EAEA;EACAoB,QAAQA,CAAA;IACN,IAAI,IAAI,CAACZ,cAAc,CAACa,OAAO,EAAE;MAC/B;;IAGF,MAAMC,QAAQ,GAAG,IAAI,CAACd,cAAc,CAACe,KAAK;IAC1C,IAAI,IAAI,CAAChB,MAAM,EAAE;MACf,IAAI,CAACF,WAAW,CAACmB,cAAc,CAAC,IAAI,CAACjB,MAAM,EAAEe,QAAQ,CAACZ,KAAK,CAAC,CAACI,SAAS,CACnEW,QAAQ,IAAI;QACXC,KAAK,CAACD,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAE;MAC5B,CAAC,EACAR,KAAK,IAAI;QACR,IAAI,CAACnB,YAAY,GAAG,wBAAwB;MAC9C,CAAC,CACF;;EAEL;;;uBAvDWC,mBAAmB,EAAAX,EAAA,CAAAsC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAxC,EAAA,CAAAsC,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAA1C,EAAA,CAAAsC,iBAAA,CAAAK,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAnBjC,mBAAmB;MAAAkC,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCVhCnD,EAAA,CAAAC,cAAA,aAA4B;UACWD,EAAA,CAAAqD,UAAA,sBAAAC,sDAAA;YAAA,OAAYF,GAAA,CAAAtB,QAAA,EAAU;UAAA,EAAC;UACxD9B,EAAA,CAAAC,cAAA,SAAI;UAAAD,EAAA,CAAAE,MAAA,uBAAgB;UAAAF,EAAA,CAAAG,YAAA,EAAK;UAGzBH,EAAA,CAAAC,cAAA,aAAkB;UACsBD,EAAA,CAAAE,MAAA,mBAAY;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAC1DH,EAAA,CAAAC,cAAA,gBAAgE;UAC9DD,EAAA,CAAAuD,UAAA,IAAAC,qCAAA,oBAA8E;UAChFxD,EAAA,CAAAG,YAAA,EAAS;UAIXH,EAAA,CAAAuD,UAAA,IAAAE,kCAAA,iBAEM;UAENzD,EAAA,CAAAC,cAAA,iBAAkF;UAChFD,EAAA,CAAAE,MAAA,qBACF;UAAAF,EAAA,CAAAG,YAAA,EAAS;;;UAlBLH,EAAA,CAAAM,SAAA,GAA4B;UAA5BN,EAAA,CAAAI,UAAA,cAAAgD,GAAA,CAAAlC,cAAA,CAA4B;UAOHlB,EAAA,CAAAM,SAAA,GAAiB;UAAjBN,EAAA,CAAAI,UAAA,YAAAgD,GAAA,CAAApC,cAAA,CAAiB;UAKxChB,EAAA,CAAAM,SAAA,GAAkB;UAAlBN,EAAA,CAAAI,UAAA,SAAAgD,GAAA,CAAA1C,YAAA,CAAkB;UAIsBV,EAAA,CAAAM,SAAA,GAAmC;UAAnCN,EAAA,CAAAI,UAAA,aAAAgD,GAAA,CAAAlC,cAAA,CAAAa,OAAA,CAAmC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}