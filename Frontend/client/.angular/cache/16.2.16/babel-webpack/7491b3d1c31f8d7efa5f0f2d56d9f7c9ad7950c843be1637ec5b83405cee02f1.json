{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(bookService, accountService, typeService, categoryService, authorService) {\n    this.bookService = bookService;\n    this.accountService = accountService;\n    this.typeService = typeService;\n    this.categoryService = categoryService;\n    this.authorService = authorService;\n    // role: string = 'Admin';  \n    this.role = null;\n    this.filteredMenuItems = [];\n    this.menuItems = [{\n      label: 'Kitablar',\n      route: '/admin/book/book-list',\n      role: ['Admin', 'Client']\n    }, {\n      label: 'Tipləri',\n      route: '/admin/type/type-list',\n      role: ['Admin']\n    }, {\n      label: 'Müəllifləri',\n      route: '/admin/author/author-list',\n      role: ['Admin']\n    }, {\n      label: 'Kateqoriyası',\n      route: '/admin/category/category-list',\n      role: ['Admin']\n    }, {\n      label: 'Header parametrlər',\n      route: '/admin/home/home-list',\n      role: ['Admin']\n    }, {\n      label: 'Slayd parametrlər',\n      route: '/admin/slide/slide-list',\n      role: ['Admin']\n    }, {\n      label: 'İstifadəçilər',\n      route: '/admin/user/user-list',\n      role: ['Admin']\n    }];\n    this.books = [];\n    this.types = [];\n    this.categories = [];\n    this.authors = [];\n    this.totalRecordsBook = 0;\n    this.totalRecordsType = 0;\n    this.totalRecordsAuthors = 0;\n    this.totalRecordsCategories = 0;\n    this.username = '';\n    this.role = this.accountService.getRole();\n  }\n  ngOnInit() {\n    this.getBooks();\n    this.getTypes();\n    this.getAuthors();\n    this.getCategories();\n    const storedUsername = localStorage.getItem('username');\n    const userRole = localStorage.getItem('role');\n    this.filteredMenuItems = this.menuItems.filter(item => item.role.includes(this.role || 'Guest'));\n    if (storedUsername) {\n      this.username = storedUsername; // Eğer localStorage'da varsa, kullanıcı adı atanıyor\n    } else {\n      this.username = 'Guest'; // Eğer yoksa, 'Guest' atanıyor\n    }\n  }\n\n  getBooks() {\n    this.bookService.getBooks().subscribe({\n      next: response => {\n        console.log('API Response:', response);\n        this.books = response;\n        this.totalRecordsBook = this.books.length;\n      },\n      error: error => console.log('Error fetching books:', error)\n    });\n  }\n  getTypes() {\n    this.typeService.getTypes().subscribe({\n      next: response => {\n        console.log('API Response:', response);\n        this.types = response;\n        this.totalRecordsType = this.types.length;\n      },\n      error: error => console.log('Error fetching types:', error)\n    });\n  }\n  getAuthors() {\n    this.authorService.getAuthors().subscribe({\n      next: response => {\n        console.log('API Response:', response);\n        this.authors = response;\n        this.totalRecordsAuthors = this.authors.length;\n      },\n      error: error => console.log('Error fetching types:', error)\n    });\n  }\n  getCategories() {\n    this.categoryService.getCategories().subscribe({\n      next: response => {\n        console.log('API Response:', response);\n        this.categories = response;\n        this.totalRecordsCategories = this.categories.length;\n      },\n      error: error => console.log('Error fetching categories:', error)\n    });\n  }\n  logout() {\n    this.accountService.logout();\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","bookService","accountService","typeService","categoryService","authorService","role","filteredMenuItems","menuItems","label","route","books","types","categories","authors","totalRecordsBook","totalRecordsType","totalRecordsAuthors","totalRecordsCategories","username","getRole","ngOnInit","getBooks","getTypes","getAuthors","getCategories","storedUsername","localStorage","getItem","userRole","filter","item","includes","subscribe","next","response","console","log","length","error","logout","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { BookService } from '../../book/book.service';\nimport { TypeService } from '../../type/type.service';\nimport { CategoryService } from '../../category/category.service';\nimport { AuthorService } from '../../author/author.service';\nimport { AccountService } from 'src/app/account/account.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  // role: string = 'Admin';  \n  role: string | null = null;\n  filteredMenuItems: any[] = [];\n  menuItems = [\n    { label: 'Kitablar', route: '/admin/book/book-list' , role: ['Admin', 'Client']},\n    { label: 'Tipləri', route: '/admin/type/type-list' ,   role: ['Admin']},\n    { label: 'Müəllifləri', route: '/admin/author/author-list' ,   role: ['Admin']},\n    { label: 'Kateqoriyası', route: '/admin/category/category-list',   role: ['Admin']},\n    { label: 'Header parametrlər', route: '/admin/home/home-list', role: ['Admin']},\n    { label: 'Slayd parametrlər', route: '/admin/slide/slide-list', role: ['Admin']},\n    { label: 'İstifadəçilər', route: '/admin/user/user-list',  role: ['Admin']},\n  ];\n  books: any[] = [];\n  types: any[] = [];\n  categories: any[] = [];\n  authors: any[] = [];\n  totalRecordsBook = 0;\n  totalRecordsType = 0;\n  totalRecordsAuthors = 0;\n  totalRecordsCategories= 0;\n\nusername: string = '';\n  constructor( private bookService: BookService,private accountService: AccountService, private typeService: TypeService, private categoryService: CategoryService,private authorService: AuthorService) {\n    this.role = this.accountService.getRole();\n  }\n\n  ngOnInit(): void {\n    this.getBooks();\n    this.getTypes();\n    this.getAuthors();\n    this.getCategories();\n    const storedUsername = localStorage.getItem('username');\n    const userRole = localStorage.getItem('role');\n    this.filteredMenuItems = this.menuItems.filter((item) => item.role.includes(this.role || 'Guest'));\n    if (storedUsername) {\n      this.username = storedUsername; // Eğer localStorage'da varsa, kullanıcı adı atanıyor\n    } else {\n      this.username = 'Guest'; // Eğer yoksa, 'Guest' atanıyor\n    }\n  }\n\n getBooks(): void { \n      this.bookService.getBooks().subscribe({\n       next: (response: any) => {\n          console.log('API Response:', response);\n            this.books = response;\n            this.totalRecordsBook = this.books.length;\n        },\n          error: error => console.log('Error fetching books:', error)\n        })\n  }\n  getTypes(): void { \n    this.typeService.getTypes().subscribe({\n     next: (response: any) => {\n        console.log('API Response:', response);\n          this.types = response;\n          this.totalRecordsType = this.types.length;\n      },\n        error: error => console.log('Error fetching types:', error)\n      })\n  }\n  getAuthors(): void { \n    this.authorService.getAuthors().subscribe({\n     next: (response: any) => {\n        console.log('API Response:', response);\n          this.authors = response;\n          this.totalRecordsAuthors = this.authors.length;\n      },\n        error: error => console.log('Error fetching types:', error)\n      })\n  }\n  getCategories(): void { \n    this.categoryService.getCategories().subscribe({\n     next: (response: any) => {\n        console.log('API Response:', response);\n          this.categories = response;\n          this.totalRecordsCategories = this.categories.length;\n      },\n        error: error => console.log('Error fetching categories:', error)\n      })\n  }\n\n  logout() {\n    this.accountService.logout();\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}