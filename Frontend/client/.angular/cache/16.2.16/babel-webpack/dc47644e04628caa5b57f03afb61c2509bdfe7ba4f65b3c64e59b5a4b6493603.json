{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n  }\n  getBooks(params) {\n    return this.http.get(`${this.baseUrl}Book/query`, {\n      params\n    });\n  }\n  // Get categories\n  getCategories() {\n    return this.http.get(`${this.baseUrl}Categories`);\n  }\n  // Get types\n  getTypes() {\n    return this.http.get(`${this.baseUrl}Types`);\n  }\n  // Get authors\n  getAuthors() {\n    return this.http.get(`${this.baseUrl}Authors`);\n  }\n  addBook(book) {\n    return this.http.post(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","BookService","constructor","http","baseUrl","apiUrl","books","getBooks","params","get","getCategories","getTypes","getAuthors","addBook","book","post","updateBook","id","put","deleteBook","delete","getBookById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book, PaginatedResponse} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books:  Book[] = [];\n  constructor(private http: HttpClient) { }\n\n  getBooks(params: any): Observable<any> {\n    return this.http.get<any>(`${this.baseUrl}Book/query`, { params });\n  }\n\n  // Get categories\n  getCategories(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}Categories`);\n  }\n\n  // Get types\n  getTypes(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}Types`);\n  }\n\n  // Get authors\n  getAuthors(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}Authors`);\n  }\n  addBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id:number,book:Book): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n\n  // getBooks(params: BookParams): Observable<PaginatedResponse<Book>> {\n  //   const queryParams: any = {\n  //     search: params.search,\n  //     pageNumber: params.pageNumber,\n  //     pageSize: params.pageSize,\n  //     typeId: params.typeId,\n  //     categoryId: params.categoryId,\n  //     authorId: params.authorId\n  //   };\n  //   return this.http.get<PaginatedResponse<Book>>(`${this.baseUrl}Book/query`, { params: queryParams });\n  // }\n\n  // getBooks(filters: any): Observable<any> {\n  //   let params = new HttpParams();\n\n  //   Object.keys(filters).forEach((key) => {\n  //     if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n  //       params = params.append(key, filters[key]);\n  //     }\n  //   });\n\n  //   return this.http.get<any>(`${this.baseUrl}/query`, { params });\n  // }\n \n\n \n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;;;AAS1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;IAC5B,KAAAC,KAAK,GAAY,EAAE;EACqB;EAExCC,QAAQA,CAACC,MAAW;IAClB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACL,OAAO,YAAY,EAAE;MAAEI;IAAM,CAAE,CAAC;EACpE;EAEA;EACAE,aAAaA,CAAA;IACX,OAAO,IAAI,CAACP,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,OAAO,YAAY,CAAC;EAC1D;EAEA;EACAO,QAAQA,CAAA;IACN,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,OAAO,OAAO,CAAC;EACrD;EAEA;EACAQ,UAAUA,CAAA;IACR,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,OAAO,SAAS,CAAC;EACvD;EACAS,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAO,IAAI,CAACX,OAAO,GAAG,cAAc,EAAEU,IAAI,CAAC;EAClE;EACAE,UAAUA,CAACC,EAAS,EAACH,IAAS;IAC5B,OAAO,IAAI,CAACX,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,OAAO,GAAE,MAAM,IAAIa,EAAE,EAAE,EAAEH,IAAI,CAAC;EACnE;EACAK,UAAUA,CAACF,EAAS;IAClB,OAAO,IAAI,CAACd,IAAI,CAACiB,MAAM,CAAO,GAAG,IAAI,CAAChB,OAAO,SAASa,EAAE,EAAE,CAAC;EAC7D;EACAI,WAAWA,CAACJ,EAAU;IACpB,OAAO,IAAI,CAACd,IAAI,CAACM,GAAG,CAAO,GAAG,IAAI,CAACL,OAAO,GAAG,MAAM,IAAIa,EAAE,EAAE,CAAC;EAC9D;;;uBAlCWhB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}