{"ast":null,"code":"import { ReplaySubject, catchError, map, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n    this.role = null;\n  }\n  register(userData) {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  login(loginData) {\n    return this.http.post(`${this.baseUrl}Account/login`, loginData).pipe(map(response => {\n      if (response.token) {\n        // Token alındıysa, başarılı login\n        localStorage.setItem('token', response.token);\n        return {\n          success: true,\n          ...response\n        };\n      } else {\n        // Başarısız login\n        return {\n          success: false\n        };\n      }\n    }), catchError(error => {\n      return throwError(() => new Error('Login failed'));\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  getRole() {\n    if (!this.role) {\n      this.role = localStorage.getItem('role'); // Rol bilgisi token ile depolanmış olmalı\n    }\n\n    return this.role;\n  }\n  setRole(role) {\n    this.role = role;\n    localStorage.setItem('role', role); // Rol bilgisini localStorage'de saklayın\n  }\n\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","catchError","map","throwError","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","role","register","userData","post","login","loginData","pipe","response","token","localStorage","setItem","success","error","Error","logout","removeItem","navigate","saveToken","getToken","getItem","isLoggedIn","getRole","setRole","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, catchError, map, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n  private role: string | null = null;\n  constructor(private http: HttpClient, private router: Router) { }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  login(loginData: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}Account/login`, loginData).pipe(\n      map(response => {\n        if (response.token) {\n          // Token alındıysa, başarılı login\n          localStorage.setItem('token', response.token);\n          return { success: true, ...response };\n        } else {\n          // Başarısız login\n          return { success: false };\n        }\n      }),\n      catchError(error => {\n        return throwError(() => new Error('Login failed'));\n      })\n    );\n  }\n  \n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n\n  saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n  \n  isLoggedIn(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  getRole(): string | null {\n    if (!this.role) {\n      this.role = localStorage.getItem('role'); // Rol bilgisi token ile depolanmış olmalı\n    }\n    return this.role;\n  }\n\n  setRole(role: string): void {\n    this.role = role;\n    localStorage.setItem('role', role); // Rol bilgisini localStorage'de saklayın\n  }\n\n \n}\n"],"mappings":"AACA,SAAqBA,aAAa,EAAEC,UAAU,EAAEC,GAAG,EAAMC,UAAU,QAAQ,MAAM;AACjF,SAASC,WAAW,QAAQ,8BAA8B;;;;AAQ1D,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJpD,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IACpB,KAAAC,iBAAiB,GAAG,IAAIX,aAAa,CAAc,CAAC,CAAC;IAC7D,KAAAY,YAAY,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;IAC5C,KAAAC,IAAI,GAAkB,IAAI;EAC8B;EAEhEC,QAAQA,CAACC,QAAa;IACpB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACR,OAAO,kBAAkB,EAAEO,QAAQ,CAAC;EACpE;EAEA;EACA;EACA;EACA;EACA;EACA;EACAE,KAAKA,CAACC,SAAc;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACR,OAAO,eAAe,EAAEU,SAAS,CAAC,CAACC,IAAI,CACxElB,GAAG,CAACmB,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClB;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7C,OAAO;UAAEG,OAAO,EAAE,IAAI;UAAE,GAAGJ;QAAQ,CAAE;OACtC,MAAM;QACL;QACA,OAAO;UAAEI,OAAO,EAAE;QAAK,CAAE;;IAE7B,CAAC,CAAC,EACFxB,UAAU,CAACyB,KAAK,IAAG;MACjB,OAAOvB,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC,CAAC,CACH;EACH;EAEAC,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,SAASA,CAACT,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAU,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,UAAUA,CAAA;IACR,MAAMZ,KAAK,GAAGC,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACX,KAAK;EAChB;EAEAa,OAAOA,CAAA;IACL,IAAI,CAAC,IAAI,CAACrB,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,GAAGS,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;;IAE5C,OAAO,IAAI,CAACnB,IAAI;EAClB;EAEAsB,OAAOA,CAACtB,IAAY;IAClB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChBS,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEV,IAAI,CAAC,CAAC,CAAC;EACtC;;;;uBAjEWT,cAAc,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAdrC,cAAc;MAAAsC,OAAA,EAAdtC,cAAc,CAAAuC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}