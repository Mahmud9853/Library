{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/account/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const isLoggedIn = this.accountService.isLoggedIn();\n    const userRole = this.accountService.getUserRole(); // Kullanıcının rolünü alıyoruz\n    const requiredRoles = next.data['roles']; // Rotaların gerektirdiği roller\n    if (!isLoggedIn) {\n      // Kullanıcı giriş yapmamışsa, login sayfasına yönlendir\n      if (state.url !== '/account/login') {\n        this.router.navigate(['/account/login']);\n      }\n      return false;\n    } else {\n      // Kullanıcı giriş yapmışsa, rol kontrolü yapalım\n      if (requiredRoles && !requiredRoles.includes(userRole)) {\n        // Eğer kullanıcının rolü geçerli rotalarla uyumsuzsa, yönlendirme yap\n        this.router.navigate(['/home']);\n        return false;\n      }\n      // Eğer giriş yapılmış ve doğru rolde ise yönlendirmeye izin ver\n      if (state.url === '/account/login') {\n        this.router.navigate(['/home']);\n        return false;\n      }\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","accountService","router","canActivate","next","state","isLoggedIn","userRole","getUserRole","requiredRoles","data","url","navigate","includes","i0","ɵɵinject","i1","AccountService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AccountService } from 'src/app/account/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private accountService: AccountService, private router: Router) { }\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const isLoggedIn = this.accountService.isLoggedIn();\n    const userRole = this.accountService.getUserRole();  // Kullanıcının rolünü alıyoruz\n    const requiredRoles = next.data['roles']; // Rotaların gerektirdiği roller\n\n    if (!isLoggedIn) {\n      // Kullanıcı giriş yapmamışsa, login sayfasına yönlendir\n      if (state.url !== '/account/login') {\n        this.router.navigate(['/account/login']);\n      }\n      return false;\n    } else {\n      // Kullanıcı giriş yapmışsa, rol kontrolü yapalım\n      if (requiredRoles && !requiredRoles.includes(userRole)) {\n        // Eğer kullanıcının rolü geçerli rotalarla uyumsuzsa, yönlendirme yap\n        this.router.navigate(['/home']);\n        return false;\n      }\n\n      // Eğer giriş yapılmış ve doğru rolde ise yönlendirmeye izin ver\n      if (state.url === '/account/login') {\n        this.router.navigate(['/home']);\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAY;EAE9EC,WAAWA,CAACC,IAA4B,EAAEC,KAA0B;IAClE,MAAMC,UAAU,GAAG,IAAI,CAACL,cAAc,CAACK,UAAU,EAAE;IACnD,MAAMC,QAAQ,GAAG,IAAI,CAACN,cAAc,CAACO,WAAW,EAAE,CAAC,CAAE;IACrD,MAAMC,aAAa,GAAGL,IAAI,CAACM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAE1C,IAAI,CAACJ,UAAU,EAAE;MACf;MACA,IAAID,KAAK,CAACM,GAAG,KAAK,gBAAgB,EAAE;QAClC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;;MAE1C,OAAO,KAAK;KACb,MAAM;MACL;MACA,IAAIH,aAAa,IAAI,CAACA,aAAa,CAACI,QAAQ,CAACN,QAAQ,CAAC,EAAE;QACtD;QACA,IAAI,CAACL,MAAM,CAACU,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,KAAK;;MAGd;MACA,IAAIP,KAAK,CAACM,GAAG,KAAK,gBAAgB,EAAE;QAClC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,KAAK;;;IAIhB,OAAO,IAAI;EACb;;;uBA/BWb,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATpB,SAAS;MAAAqB,OAAA,EAATrB,SAAS,CAAAsB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}