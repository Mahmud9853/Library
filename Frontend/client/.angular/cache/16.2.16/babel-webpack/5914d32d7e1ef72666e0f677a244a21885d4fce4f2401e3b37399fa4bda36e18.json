{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BookService = /*#__PURE__*/(() => {\n  class BookService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.books = [];\n      this.types = [];\n      this.authors = [];\n    }\n    getBookss(bookParams) {\n      let params = new HttpParams();\n      if (bookParams.search) params = params.append('search', bookParams.search);\n      if (bookParams.pageNumber) params = params.append('pageNumber', bookParams.pageNumber.toString());\n      if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n      if (bookParams.typeId) params = params.append('typeId', bookParams.typeId.toString());\n      if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId.toString());\n      if (bookParams.authorId) params = params.append('authorId', bookParams.authorId.toString());\n      return this.http.get(`${this.baseUrl}Book/query`, {\n        params\n      }).pipe(map(response => {\n        const books = response.books?.$values || [];\n        const totalRecords = response.totalRecords || 0;\n        return {\n          books,\n          totalRecords\n        };\n      }));\n    }\n    // getBookss(bookParams: BookParams): Observable<{ books: Book[]; totalRecords: number }> {\n    //   let params = new HttpParams();\n    //   if (bookParams.search) params = params.append('search', bookParams.search);\n    //   if (bookParams.pageNumber) params = params.append('currentPage', bookParams.pageNumber.toString());\n    //   if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n    //   if (bookParams.typeId) params = params.append('typeId', bookParams.typeId);\n    //   if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId);\n    //   if (bookParams.authorId) params = params.append('authorId', bookParams.authorId);\n    //   return this.http.get<any>(`${this.baseUrl}Book/query`, { params }).pipe(\n    //     map((response) => {\n    //       const books = response.books?.$values || []; // $values içindeki verileri al\n    //       const totalRecords = response.totalRecords || 0;\n    //       return { books, totalRecords };\n    //     })\n    //   );\n    // }\n    getBooks() {\n      return this.http.get(this.baseUrl + 'Book').pipe(map(response => response.$values) // $values içindeki verileri alın\n      );\n    }\n\n    getTypes() {\n      return this.http.get(this.baseUrl + 'Type').pipe(map(response => response.$values) // $values içindeki verileri alın\n      );\n    }\n\n    getAuthors() {\n      return this.http.get(this.baseUrl + 'Author').pipe(map(response => response.$values) // $values içindeki verileri alın\n      );\n    }\n\n    getCategories() {\n      return this.http.get(this.baseUrl + 'Category').pipe(map(response => response.$values) // $values içindeki verileri alın\n      );\n    }\n    // getBooks(bookParams: BookParams): Observable<any> {\n    //   let params = new HttpParams()\n    //     .set('currentPage', bookParams.pageNumber.toString())\n    //     .set('pageSize', bookParams.pageSize.toString());\n    //   if (bookParams.search) {\n    //     params = params.set('search', bookParams.search);\n    //   }\n    //   if (bookParams.typeId) {\n    //     params = params.set('typeId', bookParams.typeId);\n    //   }\n    //   if (bookParams.categoryId) {\n    //     params = params.set('categoryId', bookParams.categoryId);\n    //   }\n    //   if (bookParams.authorId) {\n    //     params = params.set('authorId', bookParams.authorId);\n    //   }\n    //   return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n    //     map((response) => {\n    //       return {\n    //         books: response.$values,\n    //         totalCount: response.totalCount,\n    //       };\n    //     })\n    //   );\n    // }\n    addBook(book, headers) {\n      return this.http.post(this.baseUrl + 'Book/create', book);\n    }\n    updateBook(id, book) {\n      return this.http.put(`${this.baseUrl + 'Book/update'}/${id}`, book);\n    }\n    deleteBook(id) {\n      return this.http.delete(`${this.baseUrl}Book/${id}`, {\n        responseType: 'text'\n      });\n    }\n    getBookById(id) {\n      return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n    }\n    downloadBook(id) {\n      return this.http.get(`${this.baseUrl}Book/download/${id}`, {\n        responseType: 'blob'\n      });\n    }\n    static {\n      this.ɵfac = function BookService_Factory(t) {\n        return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BookService,\n        factory: BookService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}