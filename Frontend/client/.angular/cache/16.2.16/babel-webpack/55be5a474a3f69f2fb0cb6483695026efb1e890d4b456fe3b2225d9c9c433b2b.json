{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.errorMessage = null;\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\',.<>?/]).*')]],\n      confirmPassword: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('UserName', this.registerForm.get('userName')?.value);\n    formData.append('Email', this.registerForm.get('email')?.value);\n    formData.append('Name', this.registerForm.get('name')?.value);\n    formData.append('Surname', this.registerForm.get('surname')?.value);\n    formData.append('BirthDate', new Date(this.registerForm.get('birthDate')?.value).toISOString() // ISO format\n    );\n\n    formData.append('Password', this.registerForm.get('password')?.value);\n    formData.append('ConfirmPassword', this.registerForm.get('confirmPassword')?.value);\n    this.accountService.register(formData).subscribe({\n      next: response => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['account/login']); // Login sayfasına yönlendirme\n      },\n\n      error: error => {\n        console.error('Registration failed:', error);\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","accountService","router","errorMessage","registerForm","group","userName","required","email","name","surname","birthDate","password","minLength","pattern","confirmPassword","onSubmit","invalid","console","error","formData","FormData","append","get","value","Date","toISOString","register","subscribe","next","response","log","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { debounceTime, finalize, map, switchMap, take } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent{\n  registerForm: FormGroup;\n  errorMessage: string | null = null;\n\n   constructor(private fb: FormBuilder, private accountService: AccountService, private router: Router) {\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\',.<>?/]).*'),\n        ],\n      ],\n      confirmPassword: ['', Validators.required],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('UserName', this.registerForm.get('userName')?.value);\n    formData.append('Email', this.registerForm.get('email')?.value);\n    formData.append('Name', this.registerForm.get('name')?.value);\n    formData.append('Surname', this.registerForm.get('surname')?.value);\n    formData.append(\n      'BirthDate',\n      new Date(this.registerForm.get('birthDate')?.value).toISOString() // ISO format\n    );\n    formData.append('Password', this.registerForm.get('password')?.value);\n    formData.append('ConfirmPassword', this.registerForm.get('confirmPassword')?.value);\n\n    this.accountService.register(formData).subscribe({\n      next: (response) => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['account/login']); // Login sayfasına yönlendirme\n      },\n      error: (error) => {\n        console.error('Registration failed:', error);\n      },\n    });\n  }\n  \n}\n\n\n\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}