{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let UserAddComponent = class UserAddComponent {\n  constructor(fb, userService, router) {\n    this.fb = fb;\n    this.userService = userService;\n    this.router = router;\n    this.errorMessage = null;\n    this.availableRoles = []; // Rolleri backend'den alacağız.\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\'?,.<>]).*')]],\n      confirmPassword: ['', [Validators.required, Validators.pattern('')]],\n      roles: [[], Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.userService.getAvailableRoles().subscribe({\n      next: roles => {\n        this.availableRoles = roles;\n      },\n      error: err => {\n        console.error('Failed to load roles:', err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const payload = {\n      RegisterDto: {\n        UserName: this.registerForm.get('userName')?.value,\n        Email: this.registerForm.get('email')?.value,\n        Name: this.registerForm.get('name')?.value,\n        Surname: this.registerForm.get('surname')?.value,\n        BirthDate: new Date(this.registerForm.get('birthDate')?.value).toISOString(),\n        Password: this.registerForm.get('password')?.value,\n        ConfirmPassword: this.registerForm.get('confirmPassword')?.value\n      },\n      RoleDto: {\n        Roles: this.registerForm.get('roles')?.value\n      }\n    };\n    this.userService.getRegisterRole(payload).subscribe({\n      next: response => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['admin/user/user-list']);\n      },\n      error: error => {\n        console.error('Registration failed:', error);\n        this.errorMessage = error.error || 'An error occurred while registering.';\n      }\n    });\n  }\n};\nUserAddComponent = __decorate([Component({\n  selector: 'app-user-add',\n  templateUrl: './user-add.component.html',\n  styleUrls: ['./user-add.component.scss']\n})], UserAddComponent);","map":{"version":3,"names":["Component","Validators","UserAddComponent","constructor","fb","userService","router","errorMessage","availableRoles","registerForm","group","userName","required","email","name","surname","birthDate","password","minLength","pattern","confirmPassword","roles","ngOnInit","getAvailableRoles","subscribe","next","error","err","console","onSubmit","invalid","payload","RegisterDto","UserName","get","value","Email","Name","Surname","BirthDate","Date","toISOString","Password","ConfirmPassword","RoleDto","Roles","getRegisterRole","response","log","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\user-add\\user-add.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-add',\n  templateUrl: './user-add.component.html',\n  styleUrls: ['./user-add.component.scss'],\n})\nexport class UserAddComponent implements OnInit {\n  registerForm: FormGroup;\n  errorMessage: string | null = null;\n  availableRoles: string[] = []; // Rolleri backend'den alacağız.\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private router: Router\n  ) {\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern(\n            '(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\'?,.<>]).*'\n          ),\n        ],\n      ],\n      confirmPassword: ['', [Validators.required, Validators.pattern('')]],\n      roles: [[], Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.userService.getAvailableRoles().subscribe({\n      next: (roles) => {\n        this.availableRoles = roles;\n      },\n      error: (err) => {\n        console.error('Failed to load roles:', err);\n      },\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n\n    const payload = {\n      RegisterDto: {\n        UserName: this.registerForm.get('userName')?.value,\n        Email: this.registerForm.get('email')?.value,\n        Name: this.registerForm.get('name')?.value,\n        Surname: this.registerForm.get('surname')?.value,\n        BirthDate: new Date(this.registerForm.get('birthDate')?.value).toISOString(),\n        Password: this.registerForm.get('password')?.value,\n        ConfirmPassword: this.registerForm.get('confirmPassword')?.value,\n      },\n      RoleDto: {\n        Roles: this.registerForm.get('roles')?.value,\n      },\n    };\n\n    this.userService.getRegisterRole(payload).subscribe({\n      next: (response) => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['admin/user/user-list']);\n      },\n      error: (error) => {\n        console.error('Registration failed:', error);\n        this.errorMessage = error.error || 'An error occurred while registering.';\n      },\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IANhB,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,cAAc,GAAa,EAAE,CAAC,CAAC;IAO7B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,KAAK,CAAC,CAAC;MACpDC,IAAI,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MAC/BG,OAAO,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACW,QAAQ,CAAC;MAClCI,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,QAAQ,CAAC;MACpCK,QAAQ,EAAE,CACR,EAAE,EACF,CACEhB,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACiB,SAAS,CAAC,CAAC,CAAC,EACvBjB,UAAU,CAACkB,OAAO,CAChB,mEAAmE,CACpE,CACF,CACF;MACDC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACnB,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACkB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACpEE,KAAK,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACW,QAAQ;KAChC,CAAC;EACJ;EAEAU,QAAQA,CAAA;IACN,IAAI,CAACjB,WAAW,CAACkB,iBAAiB,EAAE,CAACC,SAAS,CAAC;MAC7CC,IAAI,EAAGJ,KAAK,IAAI;QACd,IAAI,CAACb,cAAc,GAAGa,KAAK;MAC7B,CAAC;MACDK,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;MAC7C;KACD,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACpB,YAAY,CAACqB,OAAO,EAAE;MAC7BF,OAAO,CAACF,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,MAAMK,OAAO,GAAG;MACdC,WAAW,EAAE;QACXC,QAAQ,EAAE,IAAI,CAACxB,YAAY,CAACyB,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;QAClDC,KAAK,EAAE,IAAI,CAAC3B,YAAY,CAACyB,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK;QAC5CE,IAAI,EAAE,IAAI,CAAC5B,YAAY,CAACyB,GAAG,CAAC,MAAM,CAAC,EAAEC,KAAK;QAC1CG,OAAO,EAAE,IAAI,CAAC7B,YAAY,CAACyB,GAAG,CAAC,SAAS,CAAC,EAAEC,KAAK;QAChDI,SAAS,EAAE,IAAIC,IAAI,CAAC,IAAI,CAAC/B,YAAY,CAACyB,GAAG,CAAC,WAAW,CAAC,EAAEC,KAAK,CAAC,CAACM,WAAW,EAAE;QAC5EC,QAAQ,EAAE,IAAI,CAACjC,YAAY,CAACyB,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;QAClDQ,eAAe,EAAE,IAAI,CAAClC,YAAY,CAACyB,GAAG,CAAC,iBAAiB,CAAC,EAAEC;OAC5D;MACDS,OAAO,EAAE;QACPC,KAAK,EAAE,IAAI,CAACpC,YAAY,CAACyB,GAAG,CAAC,OAAO,CAAC,EAAEC;;KAE1C;IAED,IAAI,CAAC9B,WAAW,CAACyC,eAAe,CAACf,OAAO,CAAC,CAACP,SAAS,CAAC;MAClDC,IAAI,EAAGsB,QAAQ,IAAI;QACjBnB,OAAO,CAACoB,GAAG,CAAC,0BAA0B,EAAED,QAAQ,CAAC;QACjD,IAAI,CAACzC,MAAM,CAAC2C,QAAQ,CAAC,CAAC,sBAAsB,CAAC,CAAC;MAChD,CAAC;MACDvB,KAAK,EAAGA,KAAK,IAAI;QACfE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAI,CAACnB,YAAY,GAAGmB,KAAK,CAACA,KAAK,IAAI,sCAAsC;MAC3E;KACD,CAAC;EACJ;CACD;AA1EYxB,gBAAgB,GAAAgD,UAAA,EAL5BlD,SAAS,CAAC;EACTmD,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWnD,gBAAgB,CA0E5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}