{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BookEditComponent = class BookEditComponent {\n  constructor(bookService, route, router) {\n    this.bookService = bookService;\n    this.route = route;\n    this.router = router;\n    this.types = [];\n    this.categories = [];\n    this.authors = [];\n    this.courses = [];\n    this.book = {\n      id: 0,\n      title: '',\n      description: '',\n      createBook: '',\n      typeId: 0,\n      categoryId: 0,\n      authorId: 0,\n      courseId: 0,\n      photoFile: null,\n      documentFile: null\n    };\n  }\n  ngOnInit() {\n    this.loadTypes();\n    this.loadCategories();\n    this.loadAuthors();\n    this.loadCourses();\n    // Get book ID from the route and load book details\n    const bookId = this.route.snapshot.params['id'];\n    if (bookId) {\n      this.loadBook();\n    }\n  }\n  loadTypes() {\n    this.bookService.getTypes().subscribe({\n      next: response => {\n        console.log('API Response type:', response);\n        this.types = response;\n      },\n      error: error => console.log('Error fetching types:', error)\n    });\n  }\n  loadAuthors() {\n    this.bookService.getAuthors().subscribe({\n      next: response => {\n        console.log('API Response author:', response);\n        this.authors = response;\n      },\n      error: error => console.log('Error fetching authors:', error)\n    });\n  }\n  loadCategories() {\n    this.bookService.getCategories().subscribe({\n      next: response => {\n        console.log('API Response category:', response);\n        this.categories = response;\n      },\n      error: error => console.log('Error fetching categories:', error)\n    });\n  }\n  loadCourses() {\n    this.bookService.getCourses().subscribe({\n      next: response => {\n        console.log('API Response courses:', response);\n        this.courses = response;\n        // Courses yüklendi, şimdi edit modunda ise loadBook() çağır\n        // const bookId = this.route.snapshot.params['id'];\n        // if (bookId) {\n        //   this.loadBook();\n        // }\n      },\n\n      error: error => console.log('Error fetching courses:', error)\n    });\n  }\n  loadBook() {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    if (id) {\n      this.bookService.getBookById(id).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n          this.book = response;\n          // Tarih formatını düzelt\n          if (this.book.createBook) {\n            this.book.createBook = this.book.createBook.split('T')[0];\n          }\n          // Backend'den gelen bookType, bookCategory ve bookAuthor ile eşleştirme\n          if (this.book.bookType) {\n            this.book.typeId = this.types.find(type => type.typeName === this.book.bookType)?.id || 0;\n          }\n          if (this.book.bookCategory) {\n            this.book.categoryId = this.categories.find(category => category.name === this.book.bookCategory)?.id || 0;\n          }\n          if (this.book.bookAuthor) {\n            this.book.authorId = this.authors.find(author => author.fullName === this.book.bookAuthor)?.id || 0;\n          }\n          // if(this.book.bookCourse && this.book.courseId > 0){\n          //   const  foundCourse = this.courses.find(course => course.title === this.book.bookCourse)?.id || 0;\n          // }\n          if ((this.book.courseId === null || this.book.courseId === undefined) && this.book.bookCourse) {\n            const foundCourse = this.courses.find(course => course.title.trim().toLowerCase() === this.book.bookCourse.trim().toLowerCase());\n            this.book.courseId = foundCourse ? foundCourse.id : null;\n          }\n        },\n        error: error => {\n          console.error('Error loading book details:', error);\n        }\n      });\n    }\n  }\n  onFileChange(event, fileType) {\n    const file = event.target.files[0];\n    if (fileType === 'photo') {\n      this.book.photoFile = file;\n    } else if (fileType === 'document') {\n      this.book.documentFile = file;\n    }\n  }\n  updateBook() {\n    const formData = new FormData();\n    formData.append('Title', this.book.title);\n    formData.append('Description', this.book.description);\n    formData.append('CreateBook', this.book.createBook);\n    formData.append('TypeId', this.book.typeId.toString());\n    formData.append('CategoryId', this.book.categoryId.toString());\n    formData.append('AuthorId', this.book.authorId.toString());\n    // formData.append('CourseId', this.book.courseId.toString());\n    if (this.book.courseId && this.book.courseId > 0) {\n      formData.append('CourseId', this.book.courseId.toString());\n    }\n    if (this.book.photoFile) {\n      formData.append('PhotoFile', this.book.photoFile);\n    }\n    if (this.book.documentFile) {\n      formData.append('DocumentFile', this.book.documentFile);\n    }\n    this.bookService.updateBook(this.book.id, formData).subscribe({\n      next: response => {\n        console.log('Book updated successfully:', response);\n        // Backend'den dönen güncellenmiş veriyi atayın\n        this.book = response;\n        this.router.navigate(['/admin/book/book-list']); // Başarılı güncelleme sonrası yönlendirme\n      },\n\n      error: err => {\n        console.error('Error updating book:', err);\n      }\n    });\n  }\n};\nBookEditComponent = __decorate([Component({\n  selector: 'app-book-edit',\n  templateUrl: './book-edit.component.html',\n  styleUrls: ['./book-edit.component.scss']\n})], BookEditComponent);","map":{"version":3,"names":["Component","BookEditComponent","constructor","bookService","route","router","types","categories","authors","courses","book","id","title","description","createBook","typeId","categoryId","authorId","courseId","photoFile","documentFile","ngOnInit","loadTypes","loadCategories","loadAuthors","loadCourses","bookId","snapshot","params","loadBook","getTypes","subscribe","next","response","console","log","error","getAuthors","getCategories","getCourses","Number","paramMap","get","getBookById","split","bookType","find","type","typeName","bookCategory","category","name","bookAuthor","author","fullName","undefined","bookCourse","foundCourse","course","trim","toLowerCase","onFileChange","event","fileType","file","target","files","updateBook","formData","FormData","append","toString","navigate","err","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book-edit\\book-edit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { BookService } from '../book.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { Course } from 'src/app/shared/models/course';\n\n@Component({\n  selector: 'app-book-edit',\n  templateUrl: './book-edit.component.html',\n  styleUrls: ['./book-edit.component.scss']\n})\nexport class BookEditComponent implements OnInit {\n \n  types: any[] = [];\n  categories: any[] = [];\n  authors: any[] = [];\n  courses: Course[] = [];\n  book: any = {\n    id: 0,\n    title: '',\n    description: '',\n    createBook: '',\n    typeId: 0,\n    categoryId: 0,\n    authorId: 0,\n    courseId: 0,\n    photoFile: null,\n    documentFile: null\n  };\n\n  constructor(private bookService: BookService, private route: ActivatedRoute, private router: Router) {}\n\n  ngOnInit(): void {\n    this.loadTypes();\n    this.loadCategories();\n    this.loadAuthors();\n    this.loadCourses();\n    // Get book ID from the route and load book details\n    const bookId = this.route.snapshot.params['id'];\n    if (bookId) {\n      this.loadBook();\n    }\n  }\n\n  loadTypes() {\n    this.bookService.getTypes().subscribe({\n      next: (response: any) => {\n        console.log('API Response type:', response);\n        this.types = response;\n      },\n      error: (error) => console.log('Error fetching types:', error)\n    });\n  }\n\n  loadAuthors() {\n    this.bookService.getAuthors().subscribe({\n      next: (response: any) => {\n        console.log('API Response author:', response);\n        this.authors = response;\n      },\n      error: (error) => console.log('Error fetching authors:', error)\n    });\n  }\n\n  loadCategories() {\n    this.bookService.getCategories().subscribe({\n      next: (response: any) => {\n        console.log('API Response category:', response);\n        this.categories = response;\n      },\n      error: (error) => console.log('Error fetching categories:', error)\n    });\n  }\n  loadCourses() {\n    this.bookService.getCourses().subscribe({\n      next: (response: any) => {\n        console.log('API Response courses:', response);\n        this.courses = response;\n        // Courses yüklendi, şimdi edit modunda ise loadBook() çağır\n        // const bookId = this.route.snapshot.params['id'];\n        // if (bookId) {\n        //   this.loadBook();\n        // }\n      },\n      error: (error) => console.log('Error fetching courses:', error)\n    });\n  }\n\n  loadBook(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    if (id) {\n      this.bookService.getBookById(id).subscribe({\n        next: (response: any) => {\n          console.log('API Response:', response);\n          this.book = response;\n  \n          // Tarih formatını düzelt\n          if (this.book.createBook) {\n            this.book.createBook = this.book.createBook.split('T')[0];\n          }\n  \n          // Backend'den gelen bookType, bookCategory ve bookAuthor ile eşleştirme\n          if (this.book.bookType) {\n            this.book.typeId = this.types.find(type => type.typeName === this.book.bookType)?.id || 0;\n          }\n          if (this.book.bookCategory) {\n            this.book.categoryId = this.categories.find(category => category.name === this.book.bookCategory)?.id || 0;\n          }\n          if (this.book.bookAuthor) {\n            this.book.authorId = this.authors.find(author => author.fullName === this.book.bookAuthor)?.id || 0;\n          }\n          // if(this.book.bookCourse && this.book.courseId > 0){\n          //   const  foundCourse = this.courses.find(course => course.title === this.book.bookCourse)?.id || 0;\n          // }\n          if ((this.book.courseId === null || this.book.courseId === undefined) && this.book.bookCourse) {\n            const foundCourse = this.courses.find(course =>\n              course.title.trim().toLowerCase() === this.book.bookCourse.trim().toLowerCase()\n            );\n            this.book.courseId = foundCourse ? foundCourse.id : null;\n          }\n        },\n        error: (error) => {\n          console.error('Error loading book details:', error);\n        }\n      });\n    }\n  }\n  \n  \n\n  onFileChange(event: any, fileType: 'photo' | 'document') {\n    const file = event.target.files[0];\n    if (fileType === 'photo') {\n      this.book.photoFile = file;\n    } else if (fileType === 'document') {\n      this.book.documentFile = file;\n    }\n  }\n\n  updateBook() {\n    const formData = new FormData();\n    formData.append('Title', this.book.title);\n    formData.append('Description', this.book.description);\n    formData.append('CreateBook', this.book.createBook);\n    formData.append('TypeId', this.book.typeId.toString());\n    formData.append('CategoryId', this.book.categoryId.toString());\n    formData.append('AuthorId', this.book.authorId.toString());\n    // formData.append('CourseId', this.book.courseId.toString());\n    if (this.book.courseId && this.book.courseId > 0) {\n      formData.append('CourseId', this.book.courseId.toString());\n    }\n    if (this.book.photoFile) {\n      formData.append('PhotoFile', this.book.photoFile);\n    }\n    if (this.book.documentFile) {\n      formData.append('DocumentFile', this.book.documentFile);\n    }\n  \n    this.bookService.updateBook(this.book.id, formData).subscribe({\n      next: (response: any) => {\n        console.log('Book updated successfully:', response);\n        // Backend'den dönen güncellenmiş veriyi atayın\n        this.book = response;\n        this.router.navigate(['/admin/book/book-list']); // Başarılı güncelleme sonrası yönlendirme\n      },\n      error: (err) => {\n        console.error('Error updating book:', err);\n      }\n    });\n  }\n  \n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}