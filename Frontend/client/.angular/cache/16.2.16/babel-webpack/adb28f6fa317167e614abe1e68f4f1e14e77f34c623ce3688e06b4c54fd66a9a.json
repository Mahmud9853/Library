{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.errorMessage = '';\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value\n    };\n    this.accountService.login(loginData).subscribe({\n      next: response => {\n        console.log('Login successful:', response);\n        if (response && response.token && response.role) {\n          this.accountService.saveToken(response.token);\n          this.accountService.setRole(response.role);\n          // Kullanıcının rolüne göre yönlendirme\n          if (response.role === 'Admin' || response.role === 'Client') {\n            this.router.navigate(['/home']); // Home sayfasına yönlendir\n          } else {\n            this.errorMessage = 'Unauthorized role';\n          }\n        } else {\n          this.errorMessage = 'Invalid username or password';\n        }\n      },\n      error: error => {\n        console.error('Login failed:', error);\n        this.errorMessage = 'An error occurred during login';\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","accountService","router","errorMessage","loginForm","group","userName","required","password","onSubmit","invalid","console","error","loginData","get","value","login","subscribe","next","response","log","token","role","saveToken","setRole","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  errorMessage: string = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private accountService: AccountService,\n    private router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n\n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value,\n    };\n\n    this.accountService.login(loginData).subscribe({\n      next: (response) => {\n        console.log('Login successful:', response);\n        if (response && response.token && response.role) {\n          this.accountService.saveToken(response.token);\n          this.accountService.setRole(response.role);\n          \n          // Kullanıcının rolüne göre yönlendirme\n          if (response.role === 'Admin' || response.role === 'Client') {\n            this.router.navigate(['/home']);  // Home sayfasına yönlendir\n          } else {\n            this.errorMessage = 'Unauthorized role';\n          }\n        } else {\n          this.errorMessage = 'Invalid username or password';\n        }\n      },\n      error: (error) => {\n        console.error('Login failed:', error);\n        this.errorMessage = 'An error occurred during login';\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YACUC,EAAe,EACfC,cAA8B,EAC9BC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,YAAY,GAAW,EAAE;IAOvB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACnC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACL,SAAS,CAACM,OAAO,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,MAAMC,SAAS,GAAG;MAChBP,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACU,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;MAC/CP,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACU,GAAG,CAAC,UAAU,CAAC,EAAEC;KAC3C;IAED,IAAI,CAACd,cAAc,CAACe,KAAK,CAACH,SAAS,CAAC,CAACI,SAAS,CAAC;MAC7CC,IAAI,EAAGC,QAAQ,IAAI;QACjBR,OAAO,CAACS,GAAG,CAAC,mBAAmB,EAAED,QAAQ,CAAC;QAC1C,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,KAAK,IAAIF,QAAQ,CAACG,IAAI,EAAE;UAC/C,IAAI,CAACrB,cAAc,CAACsB,SAAS,CAACJ,QAAQ,CAACE,KAAK,CAAC;UAC7C,IAAI,CAACpB,cAAc,CAACuB,OAAO,CAACL,QAAQ,CAACG,IAAI,CAAC;UAE1C;UACA,IAAIH,QAAQ,CAACG,IAAI,KAAK,OAAO,IAAIH,QAAQ,CAACG,IAAI,KAAK,QAAQ,EAAE;YAC3D,IAAI,CAACpB,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAE;WACnC,MAAM;YACL,IAAI,CAACtB,YAAY,GAAG,mBAAmB;;SAE1C,MAAM;UACL,IAAI,CAACA,YAAY,GAAG,8BAA8B;;MAEtD,CAAC;MACDS,KAAK,EAAGA,KAAK,IAAI;QACfD,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,IAAI,CAACT,YAAY,GAAG,gCAAgC;MACtD;KACD,CAAC;EACJ;CACD;AAjDYL,cAAc,GAAA4B,UAAA,EAL1B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW/B,cAAc,CAiD1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}