{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { debounceTime, finalize, map, switchMap, take } from 'rxjs';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.errors = null;\n    this.complexPassword = \"(?=^.{6,}$)(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+}{\\\":;'?/&.,<>]).*$\";\n    this.registerForm = this.fb.group({\n      displayName: ['', Validators.required],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthdate: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email], [this.validateEmailNotToken()]],\n      password: ['', [Validators.required, Validators.pattern(this.complexPassword)]],\n      confirmPassword: ['', [Validators.required, Validators.pattern(this.complexPassword)]]\n    });\n  }\n  onSubmit() {\n    this.accountService.register(this.registerForm.value).subscribe({\n      next: () => this.router.navigateByUrl('/login'),\n      error: error => this.errors = error.errors\n    });\n  }\n  validateEmailNotToken() {\n    return control => {\n      return control.valueChanges.pipe(debounceTime(1000), take(1), switchMap(() => {\n        return this.accountService.checkEmailExists(control.value).pipe(map(result => result ? {\n          emailExists: true\n        } : null), finalize(() => control.markAsTouched()));\n      }));\n    };\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","debounceTime","finalize","map","switchMap","take","RegisterComponent","constructor","fb","accountService","router","errors","complexPassword","registerForm","group","displayName","required","name","surname","birthdate","email","validateEmailNotToken","password","pattern","confirmPassword","onSubmit","register","value","subscribe","next","navigateByUrl","error","control","valueChanges","pipe","checkEmailExists","result","emailExists","markAsTouched","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormBuilder, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { debounceTime, finalize, map, switchMap, take } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent {\n  errors: string[] | null = null;\n  constructor(private fb: FormBuilder, private accountService: AccountService, private router: Router) {}\n\n  complexPassword= \"(?=^.{6,}$)(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+}{\\\":;'?/&.,<>]).*$\"\n\n  registerForm = this.fb.group({\n    displayName: ['', Validators.required],\n    name: ['', Validators.required],\n    surname: ['', Validators.required],\n    birthdate: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email],[this.validateEmailNotToken()]],\n    password: ['', [Validators.required, Validators.pattern(this.complexPassword)]],\n    confirmPassword: ['', [Validators.required, Validators.pattern(this.complexPassword)]]\n  })\n\n  onSubmit() {\n    this.accountService.register(this.registerForm.value).subscribe({\n      next: () => this.router.navigateByUrl('/login'),\n      error: error => this.errors = error.errors\n    })\n  }\n\n  validateEmailNotToken(): AsyncValidatorFn{\n    return (control: AbstractControl) =>{\n      return control.valueChanges.pipe(\n        debounceTime(1000),\n        take(1),\n        switchMap(() => {\n          return this.accountService.checkEmailExists(control.value).pipe(\n            map(result => result ? {emailExists: true} : null),\n            finalize(() => control.markAsTouched())\n          )\n        })\n      )\n    }\n  }\n}\n\n\n\n  "],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAyDC,UAAU,QAAQ,gBAAgB;AAG3F,SAASC,YAAY,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,QAAQ,MAAM;AAO5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,EAAe,EAAUC,cAA8B,EAAUC,MAAc;IAA/E,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAD3F,KAAAC,MAAM,GAAoB,IAAI;IAG9B,KAAAC,eAAe,GAAE,iFAAiF;IAElG,KAAAC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC3BC,WAAW,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MACtCC,IAAI,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MAC/BE,OAAO,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACgB,QAAQ,CAAC;MAClCG,SAAS,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACgB,QAAQ,CAAC;MACpCI,KAAK,EAAE,CAAC,EAAE,EAAE,CAACpB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACoB,KAAK,CAAC,EAAC,CAAC,IAAI,CAACC,qBAAqB,EAAE,CAAC,CAAC;MACnFC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACtB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACuB,OAAO,CAAC,IAAI,CAACX,eAAe,CAAC,CAAC,CAAC;MAC/EY,eAAe,EAAE,CAAC,EAAE,EAAE,CAACxB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACuB,OAAO,CAAC,IAAI,CAACX,eAAe,CAAC,CAAC;KACtF,CAAC;EAZoG;EActGa,QAAQA,CAAA;IACN,IAAI,CAAChB,cAAc,CAACiB,QAAQ,CAAC,IAAI,CAACb,YAAY,CAACc,KAAK,CAAC,CAACC,SAAS,CAAC;MAC9DC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACnB,MAAM,CAACoB,aAAa,CAAC,QAAQ,CAAC;MAC/CC,KAAK,EAAEA,KAAK,IAAI,IAAI,CAACpB,MAAM,GAAGoB,KAAK,CAACpB;KACrC,CAAC;EACJ;EAEAU,qBAAqBA,CAAA;IACnB,OAAQW,OAAwB,IAAI;MAClC,OAAOA,OAAO,CAACC,YAAY,CAACC,IAAI,CAC9BjC,YAAY,CAAC,IAAI,CAAC,EAClBI,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAAC,MAAK;QACb,OAAO,IAAI,CAACK,cAAc,CAAC0B,gBAAgB,CAACH,OAAO,CAACL,KAAK,CAAC,CAACO,IAAI,CAC7D/B,GAAG,CAACiC,MAAM,IAAIA,MAAM,GAAG;UAACC,WAAW,EAAE;QAAI,CAAC,GAAG,IAAI,CAAC,EAClDnC,QAAQ,CAAC,MAAM8B,OAAO,CAACM,aAAa,EAAE,CAAC,CACxC;MACH,CAAC,CAAC,CACH;IACH,CAAC;EACH;CACD;AArCYhC,iBAAiB,GAAAiC,UAAA,EAL7BxC,SAAS,CAAC;EACTyC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWpC,iBAAiB,CAqC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}