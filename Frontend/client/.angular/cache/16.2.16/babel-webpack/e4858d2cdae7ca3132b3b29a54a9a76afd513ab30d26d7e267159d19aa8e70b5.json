{"ast":null,"code":"import { map, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.UserDto = [];\n    }\n    getUsers() {\n      return this.http.get(`${this.baseUrl}Account/users`).pipe(map(response => response.$values));\n    }\n    getRoles() {\n      return this.http.get(`${this.baseUrl}Account/roles`).pipe(tap(response => console.log(\"API Backend Response:\", response)),\n      // Yanıtı konsola yazdırır\n      map(response => response.$values) // Veriyi dönüştürmeye devam eder\n      );\n    }\n\n    changeUserRole(userId, roles) {\n      const formData = new FormData();\n      formData.append('UserId', userId);\n      roles.forEach((role, index) => formData.append(`Roles[${index}]`, role));\n      return this.http.post(`${this.baseUrl}Account/change-role`, formData);\n    }\n    deleteUser(id) {\n      return this.http.delete(`${this.baseUrl}Account/delete/${id}`);\n    }\n    updateUser(id, user) {\n      return this.http.put(`${this.baseUrl}Account/update/${id}`, user, {\n        responseType: 'text'\n      });\n    }\n    getUserById(id) {\n      return this.http.get(`${this.baseUrl}Account/user/${id}`);\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}