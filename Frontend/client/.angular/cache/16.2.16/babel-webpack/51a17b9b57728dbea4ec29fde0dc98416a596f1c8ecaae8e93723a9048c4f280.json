{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let ChangeRoleComponent = class ChangeRoleComponent {\n  constructor(fb, route,\n  // ActivatedRoute ile URL parametrelerini alacağız\n  userService // API çağrısı için servis\n  ) {\n    this.fb = fb;\n    this.route = route;\n    this.userService = userService;\n    this.availableRoles = [];\n    this.userId = null;\n    this.errorMessage = null;\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required] // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit() {\n    // URL'den userId'yi alıyoruz\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId'); // URL'deki parametreyi alıyoruz\n      if (this.userId) {\n        this.loadRoles(); // Kullanıcı ID'si varsa, roller alınacak\n      }\n    });\n  }\n  // Rolleri API'den alıyoruz\n  loadRoles() {\n    this.userService.getRoles().subscribe(roles => {\n      this.availableRoles = roles; // Roller dizisini güncelliyoruz\n    }, error => {\n      this.errorMessage = 'Unable to load roles.';\n    });\n  }\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  onSubmit() {\n    if (this.changeRoleForm.invalid) {\n      return;\n    }\n    const formData = this.changeRoleForm.value;\n    if (this.userId) {\n      this.userService.changeUserRole(this.userId, formData.roles).subscribe(response => {\n        alert(response.message); // Başarılı olursa kullanıcıya bildirim\n      }, error => {\n        this.errorMessage = 'Unable to update role.';\n      });\n    }\n  }\n};\nChangeRoleComponent = __decorate([Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})], ChangeRoleComponent);","map":{"version":3,"names":["Component","Validators","ChangeRoleComponent","constructor","fb","route","userService","availableRoles","userId","errorMessage","changeRoleForm","group","roles","required","ngOnInit","paramMap","subscribe","params","get","loadRoles","getRoles","error","onSubmit","invalid","formData","value","changeUserRole","response","alert","message","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\change-role\\change-role.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})\nexport class ChangeRoleComponent implements OnInit {\n  changeRoleForm: FormGroup; \n  availableRoles: string[] = [];\n  userId: string | null = null;\n  errorMessage: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,  // ActivatedRoute ile URL parametrelerini alacağız\n    private userService: UserService  // API çağrısı için servis\n  ) {\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required]  // Kullanıcının seçebileceği roller\n    });\n  }\n\n  ngOnInit(): void {\n    // URL'den userId'yi alıyoruz\n    this.route.paramMap.subscribe(params => {\n      this.userId = params.get('userId');  // URL'deki parametreyi alıyoruz\n      if (this.userId) {\n        this.loadRoles();  // Kullanıcı ID'si varsa, roller alınacak\n      }\n    });\n  }\n\n  // Rolleri API'den alıyoruz\n  loadRoles(): void {\n    this.userService.getRoles().subscribe(\n      (roles) => {\n        this.availableRoles = roles;  // Roller dizisini güncelliyoruz\n      },\n      (error) => {\n        this.errorMessage = 'Unable to load roles.';\n      }\n    );\n  }\n\n  // Formu submit ettiğimizde rol güncellemesi yapıyoruz\n  onSubmit(): void {\n    if (this.changeRoleForm.invalid) {\n      return;\n    }\n\n    const formData = this.changeRoleForm.value;\n    if (this.userId) {\n      this.userService.changeUserRole(this.userId, formData.roles).subscribe(\n        (response) => {\n          alert(response.message);  // Başarılı olursa kullanıcıya bildirim\n        },\n        (error) => {\n          this.errorMessage = 'Unable to update role.';\n        }\n      );\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAM9BC,YACUC,EAAe,EACfC,KAAqB;EAAG;EACxBC,WAAwB,CAAE;EAAA,E;IAF1B,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IAPrB,KAAAC,cAAc,GAAa,EAAE;IAC7B,KAAAC,MAAM,GAAkB,IAAI;IAC5B,KAAAC,YAAY,GAAkB,IAAI;IAOhC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC,CAAE;KACnC,CAAC;EACJ;;EAEAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACT,MAAM,GAAGS,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAE;MACrC,IAAI,IAAI,CAACV,MAAM,EAAE;QACf,IAAI,CAACW,SAAS,EAAE,CAAC,CAAE;;IAEvB,CAAC,CAAC;EACJ;EAEA;EACAA,SAASA,CAAA;IACP,IAAI,CAACb,WAAW,CAACc,QAAQ,EAAE,CAACJ,SAAS,CAClCJ,KAAK,IAAI;MACR,IAAI,CAACL,cAAc,GAAGK,KAAK,CAAC,CAAE;IAChC,CAAC,EACAS,KAAK,IAAI;MACR,IAAI,CAACZ,YAAY,GAAG,uBAAuB;IAC7C,CAAC,CACF;EACH;EAEA;EACAa,QAAQA,CAAA;IACN,IAAI,IAAI,CAACZ,cAAc,CAACa,OAAO,EAAE;MAC/B;;IAGF,MAAMC,QAAQ,GAAG,IAAI,CAACd,cAAc,CAACe,KAAK;IAC1C,IAAI,IAAI,CAACjB,MAAM,EAAE;MACf,IAAI,CAACF,WAAW,CAACoB,cAAc,CAAC,IAAI,CAAClB,MAAM,EAAEgB,QAAQ,CAACZ,KAAK,CAAC,CAACI,SAAS,CACnEW,QAAQ,IAAI;QACXC,KAAK,CAACD,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAE;MAC5B,CAAC,EACAR,KAAK,IAAI;QACR,IAAI,CAACZ,YAAY,GAAG,wBAAwB;MAC9C,CAAC,CACF;;EAEL;CACD;AAxDYP,mBAAmB,GAAA4B,UAAA,EAL/B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW/B,mBAAmB,CAwD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}