{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  // private currentUserSource = new ReplaySubject<User | null>(1);\n  // currentUser$ = this.currentUserSource.asObservable();\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSubject = new BehaviorSubject();\n  }\n  register(userData) {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  // login(loginData: any): Observable<any> {\n  //   return this.http.post<any>(`${this.baseUrl}Account/login`, loginData).pipe(\n  //     map(response => {\n  //       if (response.token) {\n  //         // Token alındıysa, başarılı login\n  //         localStorage.setItem('token', response.token);\n  //         return { success: true, ...response };\n  //       } else {\n  //         // Başarısız login\n  //         return { success: false };\n  //       }\n  //     }),\n  //     catchError(error => {\n  //       return throwError(() => new Error('Login failed'));\n  //     })\n  //   );\n  // }\n  login(userName, password) {\n    return this.http.post(this.baseUrl, {\n      userName,\n      password\n    }).subscribe(response => {\n      localStorage.setItem('user', JSON.stringify(response));\n      this.currentUser = this.currentUserSubject.asObservable();\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('userToken');\n  }\n  getRole() {\n    const currentuser = JSON.parse(localStorage.getItem('user'));\n    return currentuser?.role || '';\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSubject","register","userData","post","login","userName","password","subscribe","response","localStorage","setItem","JSON","stringify","currentUser","asObservable","logout","removeItem","navigate","saveToken","token","getToken","getItem","isLoggedIn","getRole","currentuser","parse","role","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, catchError, map, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n  // private currentUserSource = new ReplaySubject<User | null>(1);\n  // currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) { \n    this.currentUserSubject = new BehaviorSubject<>\n  }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n\n\n\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  // login(loginData: any): Observable<any> {\n  //   return this.http.post<any>(`${this.baseUrl}Account/login`, loginData).pipe(\n  //     map(response => {\n  //       if (response.token) {\n  //         // Token alındıysa, başarılı login\n  //         localStorage.setItem('token', response.token);\n  //         return { success: true, ...response };\n  //       } else {\n  //         // Başarısız login\n  //         return { success: false };\n  //       }\n  //     }),\n  //     catchError(error => {\n  //       return throwError(() => new Error('Login failed'));\n  //     })\n  //   );\n  // }\n  login(userName: string, password: string){\n    return this.http.post(this.baseUrl {userName, password}).subscribe(response =>{\n        localStorage.setItem('user', JSON.stringify(response));\n\n        this.currentUser = this.currentUserSubject.asObservable();\n    });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n\n  saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n  \n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('userToken'); \n\n  }\n  getRole(): string {\n    const currentuser = JSON.parse(localStorage.getItem('user')!);\n    return currentuser?.role || '';\n  }\n\n \n}\n"],"mappings":"AACA,SAASA,eAAe,QAAoE,MAAM;AAClG,SAASC,WAAW,QAAQ,8BAA8B;;;;AAQ1D,OAAM,MAAOC,cAAc;EAKzB;EACA;EAEAC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IANpD,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IAO1B,IAAI,CAACC,kBAAkB,GAAG,IAAIR,eAAiB,CAAjB,CAAiB;EACjD;EAEAS,QAAQA,CAACC,QAAa;IACpB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,kBAAkB,EAAEI,QAAQ,CAAC;EACpE;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAE,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACO,IAAI,CAAC,IAAI,CAACL,OAAO,EAAC;MAACO,QAAQ;MAAEC;IAAQ,CAAC,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC1EC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;MAEtD,IAAI,CAACK,WAAW,GAAG,IAAI,CAACb,kBAAkB,CAACc,YAAY,EAAE;IAC7D,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAA;IACJN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,SAASA,CAACC,KAAa;IACrBV,YAAY,CAACC,OAAO,CAAC,OAAO,EAAES,KAAK,CAAC;EACtC;EAEAC,QAAQA,CAAA;IACN,OAAOX,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACb,YAAY,CAACY,OAAO,CAAC,WAAW,CAAC;EAE5C;EACAE,OAAOA,CAAA;IACL,MAAMC,WAAW,GAAGb,IAAI,CAACc,KAAK,CAAChB,YAAY,CAACY,OAAO,CAAC,MAAM,CAAE,CAAC;IAC7D,OAAOG,WAAW,EAAEE,IAAI,IAAI,EAAE;EAChC;;;uBArEWhC,cAAc,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAdtC,cAAc;MAAAuC,OAAA,EAAdvC,cAAc,CAAAwC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}