{"ast":null,"code":"import { ReplaySubject, catchError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  register(userData) {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n  login(model) {\n    return this.http.post(`${this.baseUrl}Account/register`, model).pipe(catchError(error => {\n      throw error;\n    }));\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getRole() {\n    return localStorage.getItem('role'); // Rol localStorage'den alınır\n  }\n\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setRole(role) {\n    this.role = role;\n    localStorage.setItem('role', role);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","catchError","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUserSubject","BehaviorSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","register","userData","post","logout","removeItem","navigate","login","model","pipe","error","saveToken","token","setItem","getToken","getRole","isLoggedIn","setRole","role","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, catchError, map, of, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n  \n  constructor(private http: HttpClient, private router: Router) { \n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('user') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n \n  \n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n\n  login(model: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}Account/register`, model).pipe(\n      catchError(error => {\n        throw error;\n      })\n    );\n  }\n  saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n  \n  getRole(): string | null {\n    return localStorage.getItem('role'); // Rol localStorage'den alınır\n  }\n  \n   isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  setRole(role: string): void {\n    this.role = role;\n    localStorage.setItem('role', role);\n  }\n\n \n}\n"],"mappings":"AACA,SAAqBA,aAAa,EAAEC,UAAU,QAAkC,MAAM;AACtF,SAASC,WAAW,QAAQ,8BAA8B;;;;AAQ1D,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IALpD,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IACpB,KAAAC,iBAAiB,GAAG,IAAIT,aAAa,CAAc,CAAC,CAAC;IAK3D,IAAI,CAACU,kBAAkB,GAAG,IAAIC,eAAe,CAAMC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;IACpG,IAAI,CAACC,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAACO,YAAY,EAAE;EAC3D;EAEAC,QAAQA,CAACC,QAAa;IACpB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACb,OAAO,kBAAkB,EAAEY,QAAQ,CAAC;EACpE;EAEA;EACA;EACA;EACA;EACA;EACA;EAGAE,MAAMA,CAAA;IACJP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,KAAKA,CAACC,KAAU;IACd,OAAO,IAAI,CAACpB,IAAI,CAACe,IAAI,CAAM,GAAG,IAAI,CAACb,OAAO,kBAAkB,EAAEkB,KAAK,CAAC,CAACC,IAAI,CACvEzB,UAAU,CAAC0B,KAAK,IAAG;MACjB,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EACAC,SAASA,CAACC,KAAa;IACrBf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EAEAE,QAAQA,CAAA;IACN,OAAOjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAiB,OAAOA,CAAA;IACL,OAAOlB,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EACvC;;EAECkB,UAAUA,CAAA;IACT,OAAO,CAAC,CAACnB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAmB,OAAOA,CAACC,IAAY;IAClB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChBrB,YAAY,CAACgB,OAAO,CAAC,MAAM,EAAEK,IAAI,CAAC;EACpC;;;uBAxDWhC,cAAc,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAdtC,cAAc;MAAAuC,OAAA,EAAdvC,cAAc,CAAAwC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}