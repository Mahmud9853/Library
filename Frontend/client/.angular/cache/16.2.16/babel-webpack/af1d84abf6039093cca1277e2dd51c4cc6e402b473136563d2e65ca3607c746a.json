{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetpasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 6);\n    i0.ɵɵtext(2, \"\\u0130stifad\\u0259\\u00E7i ad\\u0131 t\\u0259l\\u0259b olunur.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ResetpasswordComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 6);\n    i0.ɵɵtext(2, \" Yeni parol t\\u0259l\\u0259b olunur v\\u0259 \\u0259n az 6 simvoldan ibar\\u0259t olmal\\u0131d\\u0131r. \");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class ResetpasswordComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.message = '';\n    this.resetPasswordForm = this.fb.group({\n      userName: ['', [Validators.required]],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    console.log(this.resetPasswordForm.valid); // Form geçerliliğini kontrol et\n    if (!this.resetPasswordForm.valid) {\n      // Form geçerli değilse işlem yapma\n      console.error('Form is invalid'); // Form geçerli değilse hata mesajı ver\n      return;\n    }\n    // Form verilerini al\n    const formData = new FormData();\n    formData.append('userName', this.resetPasswordForm.get('userName')?.value);\n    formData.append('newPassword', this.resetPasswordForm.get('newPassword')?.value);\n    // Şifre sıfırlama işlemi\n    this.accountService.resetPassword(formData).subscribe({\n      next: response => {\n        console.log(response.message);\n        this.message = response.message;\n        this.router.navigate(['account/login']);\n      },\n      error: error => {\n        this.message = error.error.message || 'Bir hata oluştu.';\n      }\n    });\n  }\n  static {\n    this.ɵfac = function ResetpasswordComponent_Factory(t) {\n      return new (t || ResetpasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetpasswordComponent,\n      selectors: [[\"app-resetpassword\"]],\n      decls: 10,\n      vars: 2,\n      consts: [[1, \"form-group\", \"my-2\"], [\"for\", \"userName\", 1, \"my-2\"], [\"id\", \"userName\", \"formControlName\", \"userName\", \"placeholder\", \"\\u0130stifad\\u0259\\u00E7i ad\\u0131n\\u0131z\\u0131 daxil edin\", \"type\", \"text\", 1, \"form-control\", \"w-100\"], [4, \"ngIf\"], [\"for\", \"newPassword\", 1, \"my-2\"], [\"type\", \"password\", \"id\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", \"w-100\"], [1, \"text-danger\"]],\n      template: function ResetpasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n          i0.ɵɵtext(2, \"\\u0130stifad\\u0259\\u00E7i ad\\u0131\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"input\", 2);\n          i0.ɵɵtemplate(4, ResetpasswordComponent_div_4_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 0)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"Yeni Parol\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 5);\n          i0.ɵɵtemplate(9, ResetpasswordComponent_div_9_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          let tmp_0_0;\n          let tmp_1_0;\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_0_0 = ctx.resetPasswordForm.get(\"userName\")) == null ? null : tmp_0_0.invalid) && ((tmp_0_0 = ctx.resetPasswordForm.get(\"userName\")) == null ? null : tmp_0_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.resetPasswordForm.get(\"newPassword\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.resetPasswordForm.get(\"newPassword\")) == null ? null : tmp_1_0.touched));\n        }\n      },\n      dependencies: [i4.NgIf, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetpasswordComponent","constructor","fb","accountService","router","message","resetPasswordForm","group","userName","required","newPassword","minLength","onSubmit","console","log","valid","error","formData","FormData","append","get","value","resetPassword","subscribe","next","response","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","AccountService","i3","Router","selectors","decls","vars","consts","template","ResetpasswordComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","ResetpasswordComponent_div_4_Template","ResetpasswordComponent_div_9_Template","ɵɵadvance","ɵɵproperty","tmp_0_0","invalid","touched","tmp_1_0"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.scss']\n})\nexport class ResetpasswordComponent {\n  resetPasswordForm: FormGroup;\n  message: string = '';\n\n  constructor(private fb: FormBuilder, private accountService: AccountService, private router: Router) {\n    this.resetPasswordForm = this.fb.group({\n      userName: ['', [Validators.required]],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.resetPasswordForm.valid);  // Form geçerliliğini kontrol et\n    if (!this.resetPasswordForm.valid) {  // Form geçerli değilse işlem yapma\n      console.error('Form is invalid');    // Form geçerli değilse hata mesajı ver\n      return;\n    }\n  \n    // Form verilerini al\n    const formData = new FormData();\n    formData.append('userName', this.resetPasswordForm.get('userName')?.value);\n    formData.append('newPassword', this.resetPasswordForm.get('newPassword')?.value);\n  \n    // Şifre sıfırlama işlemi\n    this.accountService.resetPassword(formData).subscribe({\n      next: (response) => {\n        console.log(response.message);\n        this.message = response.message;\n        this.router.navigate(['account/login']);\n      },\n      error: (error) => {\n        this.message = error.error.message || 'Bir hata oluştu.';\n      }\n    });\n  }\n  \n  \n}\n","\n<div class=\"form-group my-2\">\n    <label for=\"userName\" class=\"my-2\">İstifadəçi adı</label>\n    <input id=\"userName\" formControlName=\"userName\" placeholder=\"İstifadəçi adınızı daxil edin\" type=\"text\" class=\"form-control w-100\" />\n    <div *ngIf=\"resetPasswordForm.get('userName')?.invalid && resetPasswordForm.get('userName')?.touched\">\n      <small class=\"text-danger\">İstifadəçi adı tələb olunur.</small>\n    </div>\n  </div>\n  \n  <div class=\"form-group my-2\">\n    <label for=\"newPassword\" class=\"my-2\">Yeni Parol</label>\n    <input class=\"form-control w-100\" type=\"password\" id=\"newPassword\" formControlName=\"newPassword\" />\n    <div *ngIf=\"resetPasswordForm.get('newPassword')?.invalid && resetPasswordForm.get('newPassword')?.touched\">\n      <small class=\"text-danger\">\n        Yeni parol tələb olunur və ən az 6 simvoldan ibarət olmalıdır.\n      </small>\n    </div>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}