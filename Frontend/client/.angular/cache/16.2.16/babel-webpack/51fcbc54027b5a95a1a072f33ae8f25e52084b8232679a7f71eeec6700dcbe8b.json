{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let ChangeRoleComponent = class ChangeRoleComponent {\n  constructor(fb, route, userService,\n  // UserService ile API çağrısı\n  router) {\n    this.fb = fb;\n    this.route = route;\n    this.userService = userService;\n    this.router = router;\n    this.availableRoles = ['Admin', 'Client']; // Rolleri burada belirtiyoruz\n    this.errorMessage = null;\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required]\n    });\n  }\n  ngOnInit() {\n    // URL'den kullanıcı ID'sini alıyoruz\n    this.userId = this.route.snapshot.paramMap.get('userId');\n    // Formu başlatıyoruz\n    this.changeRoleForm.setValue({\n      roles: [] // Başlangıçta roller boş\n    });\n  }\n\n  onSubmit() {\n    if (this.changeRoleForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const formData = this.changeRoleForm.value;\n    const selectedRoles = formData.roles;\n    // API çağrısı ile rol değişikliği yapılabilir\n    this.userService.changeUserRole(this.userId, selectedRoles).subscribe(response => {\n      console.log('Rol başarıyla değiştirildi:', response);\n      this.router.navigate(['/admin/user/list']); // İşlem sonrası kullanıcı listesine yönlendirilebilir\n    }, error => {\n      this.errorMessage = 'Bir hata oluştu. Lütfen tekrar deneyin.';\n      console.error('Hata:', error);\n    });\n  }\n};\nChangeRoleComponent = __decorate([Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})], ChangeRoleComponent);","map":{"version":3,"names":["Component","Validators","ChangeRoleComponent","constructor","fb","route","userService","router","availableRoles","errorMessage","changeRoleForm","group","roles","required","ngOnInit","userId","snapshot","paramMap","get","setValue","onSubmit","invalid","console","error","formData","value","selectedRoles","changeUserRole","subscribe","response","log","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\user-list\\user-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from 'src/app/services/user.service'; // UserService kullanarak API'ye çağrı yapabilirsiniz\n\n@Component({\n  selector: 'app-change-role',\n  templateUrl: './change-role.component.html',\n  styleUrls: ['./change-role.component.scss']\n})\nexport class ChangeRoleComponent implements OnInit {\n  changeRoleForm: FormGroup;\n  availableRoles: string[] = ['Admin', 'Client'];  // Rolleri burada belirtiyoruz\n  userId: string;  // Kullanıcı ID'si\n  errorMessage: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private userService: UserService,  // UserService ile API çağrısı\n    private router: Router\n  ) {\n    this.changeRoleForm = this.fb.group({\n      roles: [[], Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    // URL'den kullanıcı ID'sini alıyoruz\n    this.userId = this.route.snapshot.paramMap.get('userId')!;\n\n    // Formu başlatıyoruz\n    this.changeRoleForm.setValue({\n      roles: []  // Başlangıçta roller boş\n    });\n  }\n\n  onSubmit(): void {\n    if (this.changeRoleForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n\n    const formData = this.changeRoleForm.value;\n    const selectedRoles = formData.roles;\n\n    // API çağrısı ile rol değişikliği yapılabilir\n    this.userService.changeUserRole(this.userId, selectedRoles).subscribe(\n      response => {\n        console.log('Rol başarıyla değiştirildi:', response);\n        this.router.navigate(['/admin/user/list']);  // İşlem sonrası kullanıcı listesine yönlendirilebilir\n      },\n      error => {\n        this.errorMessage = 'Bir hata oluştu. Lütfen tekrar deneyin.';\n        console.error('Hata:', error);\n      }\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAM9BC,YACUC,EAAe,EACfC,KAAqB,EACrBC,WAAwB;EAAG;EAC3BC,MAAc;IAHd,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IARhB,KAAAC,cAAc,GAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAE;IAEjD,KAAAC,YAAY,GAAkB,IAAI;IAQhC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ;KAChC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAE;IAEzD;IACA,IAAI,CAACR,cAAc,CAACS,QAAQ,CAAC;MAC3BP,KAAK,EAAE,EAAE,CAAE;KACZ,CAAC;EACJ;;EAEAQ,QAAQA,CAAA;IACN,IAAI,IAAI,CAACV,cAAc,CAACW,OAAO,EAAE;MAC/BC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,MAAMC,QAAQ,GAAG,IAAI,CAACd,cAAc,CAACe,KAAK;IAC1C,MAAMC,aAAa,GAAGF,QAAQ,CAACZ,KAAK;IAEpC;IACA,IAAI,CAACN,WAAW,CAACqB,cAAc,CAAC,IAAI,CAACZ,MAAM,EAAEW,aAAa,CAAC,CAACE,SAAS,CACnEC,QAAQ,IAAG;MACTP,OAAO,CAACQ,GAAG,CAAC,6BAA6B,EAAED,QAAQ,CAAC;MACpD,IAAI,CAACtB,MAAM,CAACwB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAE;IAC/C,CAAC,EACDR,KAAK,IAAG;MACN,IAAI,CAACd,YAAY,GAAG,yCAAyC;MAC7Da,OAAO,CAACC,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC/B,CAAC,CACF;EACH;CACD;AAhDYrB,mBAAmB,GAAA8B,UAAA,EAL/BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWjC,mBAAmB,CAgD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}