{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n  }\n  getBooks(bookParams) {\n    return this.http.get(this.baseUrl + 'Book').pipe(map(response => response.$values) // $values içindeki verileri alın\n    );\n  }\n  // getBooks(bookParams: BookParams): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber.toString())\n  //     .set('pageSize', bookParams.pageSize.toString());\n  //   if (bookParams.search) {\n  //     params = params.set('search', bookParams.search);\n  //   }\n  //   if (bookParams.typeId) {\n  //     params = params.set('typeId', bookParams.typeId);\n  //   }\n  //   if (bookParams.categoryId) {\n  //     params = params.set('categoryId', bookParams.categoryId);\n  //   }\n  //   if (bookParams.authorId) {\n  //     params = params.set('authorId', bookParams.authorId);\n  //   }\n  //   return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n  //     map((response) => {\n  //       return {\n  //         books: response.$values,\n  //         totalCount: response.totalCount,\n  //       };\n  //     })\n  //   );\n  // }\n  addBook(book) {\n    return this.http.post(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  getBooks(bookParams) {\n    let params = new HttpParams().set('currentPage', bookParams.pageNumber || 1).set('pageSize', bookParams.pageSize || 10);\n    if (bookParams.search) params = params.set('search', bookParams.search);\n    if (bookParams.typeId) params = params.set('typeId', bookParams.typeId);\n    if (bookParams.categoryId) params = params.set('categoryId', bookParams.categoryId);\n    if (bookParams.authorId) params = params.set('authorId', bookParams.authorId);\n    return this.http.get(`${this.baseUrl}Book/query`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","map","BookService","constructor","http","baseUrl","apiUrl","books","getBooks","bookParams","get","pipe","response","$values","addBook","book","post","updateBook","id","put","deleteBook","delete","getBookById","params","set","pageNumber","pageSize","search","typeId","categoryId","authorId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { BookResponseDto } from 'src/app/shared/models/bookResponseDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books:  Book[] = [];\n  constructor(private http: HttpClient) { }\n\n  getBooks(bookParams: BookParams): Observable<any[]> {\n    return this.http.get<any>(this.baseUrl + 'Book').pipe(\n      map((response) => response.$values) // $values içindeki verileri alın\n    );\n  }\n  // getBooks(bookParams: BookParams): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber.toString())\n  //     .set('pageSize', bookParams.pageSize.toString());\n  \n  //   if (bookParams.search) {\n  //     params = params.set('search', bookParams.search);\n  //   }\n  //   if (bookParams.typeId) {\n  //     params = params.set('typeId', bookParams.typeId);\n  //   }\n  //   if (bookParams.categoryId) {\n  //     params = params.set('categoryId', bookParams.categoryId);\n  //   }\n  //   if (bookParams.authorId) {\n  //     params = params.set('authorId', bookParams.authorId);\n  //   }\n  \n  //   return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n  //     map((response) => {\n  //       return {\n  //         books: response.$values,\n  //         totalCount: response.totalCount,\n  //       };\n  //     })\n  //   );\n  // }\n  \n  \n  addBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id:number,book:Book): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  \n  getBooks(bookParams: any): Observable<any> {\n    let params = new HttpParams()\n      .set('currentPage', bookParams.pageNumber || 1)\n      .set('pageSize', bookParams.pageSize || 10);\n\n    if (bookParams.search) params = params.set('search', bookParams.search);\n    if (bookParams.typeId) params = params.set('typeId', bookParams.typeId);\n    if (bookParams.categoryId) params = params.set('categoryId', bookParams.categoryId);\n    if (bookParams.authorId) params = params.set('authorId', bookParams.authorId);\n\n    return this.http.get<any>(`${this.baseUrl}Book/query`, { params });\n  }\n \n\n \n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAoBC,UAAU,QAAO,sBAAsB;AAC3D,SAASC,GAAG,QAAoB,MAAM;;;AAQtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAGN,WAAW,CAACO,MAAM;IAC5B,KAAAC,KAAK,GAAY,EAAE;EACqB;EAExCC,QAAQA,CAACC,UAAsB;IAC7B,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,IAAI,CAACL,OAAO,GAAG,MAAM,CAAC,CAACM,IAAI,CACnDV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;KACrC;EACH;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAO,IAAI,CAACX,OAAO,GAAG,cAAc,EAAEU,IAAI,CAAC;EAClE;EACAE,UAAUA,CAACC,EAAS,EAACH,IAAS;IAC5B,OAAO,IAAI,CAACX,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,OAAO,GAAE,MAAM,IAAIa,EAAE,EAAE,EAAEH,IAAI,CAAC;EACnE;EACAK,UAAUA,CAACF,EAAS;IAClB,OAAO,IAAI,CAACd,IAAI,CAACiB,MAAM,CAAO,GAAG,IAAI,CAAChB,OAAO,SAASa,EAAE,EAAE,CAAC;EAC7D;EACAI,WAAWA,CAACJ,EAAU;IACpB,OAAO,IAAI,CAACd,IAAI,CAACM,GAAG,CAAO,GAAG,IAAI,CAACL,OAAO,GAAG,MAAM,IAAIa,EAAE,EAAE,CAAC;EAC9D;EACA;EACA;EACA;EACA;EACA;EAEAV,QAAQA,CAACC,UAAe;IACtB,IAAIc,MAAM,GAAG,IAAIvB,UAAU,EAAE,CAC1BwB,GAAG,CAAC,aAAa,EAAEf,UAAU,CAACgB,UAAU,IAAI,CAAC,CAAC,CAC9CD,GAAG,CAAC,UAAU,EAAEf,UAAU,CAACiB,QAAQ,IAAI,EAAE,CAAC;IAE7C,IAAIjB,UAAU,CAACkB,MAAM,EAAEJ,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEf,UAAU,CAACkB,MAAM,CAAC;IACvE,IAAIlB,UAAU,CAACmB,MAAM,EAAEL,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEf,UAAU,CAACmB,MAAM,CAAC;IACvE,IAAInB,UAAU,CAACoB,UAAU,EAAEN,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,YAAY,EAAEf,UAAU,CAACoB,UAAU,CAAC;IACnF,IAAIpB,UAAU,CAACqB,QAAQ,EAAEP,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEf,UAAU,CAACqB,QAAQ,CAAC;IAE7E,OAAO,IAAI,CAAC1B,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACL,OAAO,YAAY,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACpE;;;uBApEWrB,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}