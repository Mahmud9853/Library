{"ast":null,"code":"import { ReplaySubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n    this.role = null;\n  }\n  register(userData) {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  login(loginData) {\n    return this.http.post(`${this.baseUrl}Account/login`, loginData).pipe(tap(response => {\n      if (response && response.userName) {\n        localStorage.setItem('username', response.userName); // Kullanıcı adı localStorage'a kaydediliyor\n      }\n\n      if (response && response.role) {\n        localStorage.setItem('role', response.role); // Save the role to localStorage\n      }\n    }));\n  }\n\n  resetPassword(resetPasswordData) {\n    return this.http.post(`${this.baseUrl}Account/resetpassword`, resetPasswordData), {\n      responseType: 'text'\n    };\n    ;\n  }\n  // Token ve Role'ü localStorage'da saklamak için yardımcı metodlar\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  // Kullanıcının login olup olmadığını kontrol etme\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  // Token'ı almak\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  // Rolü almak\n  getRole() {\n    const token = localStorage.getItem('token'); // JWT varsa al\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split('.')[1])); // JWT payload\n    return payload.role || null; // Rolü döndür\n  }\n\n  getCurrentUser() {\n    return this.currentUser$; // Mevcut kullanıcı\n  }\n  // Çıkış yapma\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    this.router.navigate(['/account/login']);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","tap","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","role","register","userData","post","login","loginData","pipe","response","userName","localStorage","setItem","resetPassword","resetPasswordData","responseType","saveToken","token","setRole","isLoggedIn","getItem","getToken","getRole","payload","JSON","parse","atob","split","getCurrentUser","logout","removeItem","navigate","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, catchError, map, of, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  private role: string | null = null;\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n \n  login(loginData: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}Account/login`, loginData).pipe(\n      tap((response) => {\n        if (response && response.userName) {\n          localStorage.setItem('username', response.userName); // Kullanıcı adı localStorage'a kaydediliyor\n        }\n        if (response && response.role) {\n          localStorage.setItem('role', response.role);  // Save the role to localStorage\n        }\n      })\n    );\n  }\n\n  resetPassword(resetPasswordData: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}Account/resetpassword`, resetPasswordData), {\n      responseType: 'text' as 'json'\n      });\n  }\n\n  // Token ve Role'ü localStorage'da saklamak için yardımcı metodlar\n  saveToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  // Kullanıcının login olup olmadığını kontrol etme\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  // Token'ı almak\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  // Rolü almak\n  getRole(): string | null {\n    const token = localStorage.getItem('token'); // JWT varsa al\n    if (!token) return null;\n  \n    const payload = JSON.parse(atob(token.split('.')[1])); // JWT payload\n    return payload.role || null; // Rolü döndür\n  }\n  \n  getCurrentUser(): any {\n    return this.  currentUser$; // Mevcut kullanıcı\n  }\n  \n  // Çıkış yapma\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    this.router.navigate(['/account/login']);\n  }\n \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}