{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetpasswordComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 12);\n    i0.ɵɵtext(2, \"\\u0130stifad\\u0259\\u00E7i ad\\u0131 t\\u0259l\\u0259b olunur.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ResetpasswordComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 12);\n    i0.ɵɵtext(2, \" Yeni parol t\\u0259l\\u0259b olunur v\\u0259 \\u0259n az 6 simvoldan ibar\\u0259t olmal\\u0131d\\u0131r. \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ResetpasswordComponent_p_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.message);\n  }\n}\nexport class ResetpasswordComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.message = '';\n    this.resetPasswordForm = this.fb.group({\n      userName: ['', Validators.required],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    console.log(this.resetPasswordForm.valid); // Form geçerliliğini kontrol et\n    if (!this.resetPasswordForm.valid) {\n      // Form geçerli değilse işlem yapma\n      console.error('Form is invalid'); // Form geçerli değilse hata mesajı ver\n      return;\n    }\n    // Form verilerini al\n    const formData = {\n      userName: this.resetPasswordForm.get('userName')?.value,\n      newPassword: this.resetPasswordForm.get('newPassword')?.value\n    };\n    // Şifre sıfırlama işlemi\n    this.accountService.resetPassword(formData).subscribe({\n      next: response => {\n        console.log(response); // Burada response.message yerine sadece response olabilir\n        this.message = response; // Eğer response bir string mesajsa\n        this.router.navigate(['account/login']);\n      },\n      error: error => {\n        console.error('Backend Error: ', error); // Hata mesajını konsola yazdırın\n        this.message = error.error.message || 'Bir hata oluştu.';\n      }\n    });\n  }\n  static {\n    this.ɵfac = function ResetpasswordComponent_Factory(t) {\n      return new (t || ResetpasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetpasswordComponent,\n      selectors: [[\"app-resetpassword\"]],\n      decls: 19,\n      vars: 5,\n      consts: [[1, \"container\"], [1, \"row\"], [1, \"text-center\", \"my-3\"], [1, \"col-md-12\", \"justify-content-center\", 2, \"display\", \"flex\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"my-2\"], [\"for\", \"userName\", 1, \"my-2\"], [\"id\", \"userName\", \"formControlName\", \"userName\", \"placeholder\", \"\\u0130stifad\\u0259\\u00E7i ad\\u0131n\\u0131z\\u0131 daxil edin\", \"type\", \"text\", 1, \"form-control\", \"w-100\"], [4, \"ngIf\"], [\"for\", \"newPassword\", 1, \"my-2\"], [\"type\", \"password\", \"id\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", \"w-100\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-danger\"]],\n      template: function ResetpasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"Parolu yenil\\u0259\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function ResetpasswordComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"\\u0130stifad\\u0259\\u00E7i ad\\u0131\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵtemplate(10, ResetpasswordComponent_div_10_Template, 3, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Yeni Parol\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 10);\n          i0.ɵɵtemplate(15, ResetpasswordComponent_div_15_Template, 3, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"button\", 11);\n          i0.ɵɵtext(17, \"Yenil\\u0259 parolu\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, ResetpasswordComponent_p_18_Template, 2, 1, \"p\", 8);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.resetPasswordForm.get(\"userName\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.resetPasswordForm.get(\"userName\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.resetPasswordForm.get(\"newPassword\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.resetPasswordForm.get(\"newPassword\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.resetPasswordForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.message);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r2","message","ResetpasswordComponent","constructor","fb","accountService","router","resetPasswordForm","group","userName","required","newPassword","minLength","onSubmit","console","log","valid","error","formData","get","value","resetPassword","subscribe","next","response","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","AccountService","i3","Router","selectors","decls","vars","consts","template","ResetpasswordComponent_Template","rf","ctx","ɵɵlistener","ResetpasswordComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵtemplate","ResetpasswordComponent_div_10_Template","ResetpasswordComponent_div_15_Template","ResetpasswordComponent_p_18_Template","ɵɵproperty","tmp_1_0","invalid","touched","tmp_2_0"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.scss']\n})\nexport class ResetpasswordComponent {\n  resetPasswordForm: FormGroup;\n  message: string = '';\n\n  constructor(private fb: FormBuilder, private accountService: AccountService, private router: Router) {\n    this.resetPasswordForm = this.fb.group({\n      userName: ['', Validators.required],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.resetPasswordForm.valid);  // Form geçerliliğini kontrol et\n    if (!this.resetPasswordForm.valid) {  // Form geçerli değilse işlem yapma\n      console.error('Form is invalid');    // Form geçerli değilse hata mesajı ver\n      return;\n    }\n\n    // Form verilerini al\n    const formData = {\n      userName: this.resetPasswordForm.get('userName')?.value,\n      newPassword: this.resetPasswordForm.get('newPassword')?.value\n    };\n  \n    // Şifre sıfırlama işlemi\n    this.accountService.resetPassword(formData).subscribe({\n      next: (response) => {\n        console.log(response);  // Burada response.message yerine sadece response olabilir\n        this.message = response;  // Eğer response bir string mesajsa\n        this.router.navigate(['account/login']);\n      },\n      error: (error) => {\n        console.error('Backend Error: ', error);  // Hata mesajını konsola yazdırın\n        this.message = error.error.message || 'Bir hata oluştu.';\n      }\n    });\n}\n\n  \n  \n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <h2 class=\"text-center my-3\">Parolu yenilə</h2>\n        <div class=\"col-md-12 justify-content-center\" style=\"display:flex\">\n            <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group my-2\">\n                    <label for=\"userName\" class=\"my-2\">İstifadəçi adı</label>\n                    <input id=\"userName\" formControlName=\"userName\" placeholder=\"İstifadəçi adınızı daxil edin\" type=\"text\" class=\"form-control w-100\" />\n                    <div *ngIf=\"resetPasswordForm.get('userName')?.invalid && resetPasswordForm.get('userName')?.touched\">\n                      <small class=\"text-danger\">İstifadəçi adı tələb olunur.</small>\n                    </div>\n                  </div>\n                  \n                  <div class=\"form-group my-2\">\n                    <label for=\"newPassword\" class=\"my-2\">Yeni Parol</label>\n                    <input class=\"form-control w-100\" type=\"password\" id=\"newPassword\" formControlName=\"newPassword\" />\n                    <div *ngIf=\"resetPasswordForm.get('newPassword')?.invalid && resetPasswordForm.get('newPassword')?.touched\">\n                      <small class=\"text-danger\">\n                        Yeni parol tələb olunur və ən az 6 simvoldan ibarət olmalıdır.\n                      </small>\n                    </div>\n                  </div>\n                  \n                <button type=\"submit\" [disabled]=\"resetPasswordForm.invalid\" class=\"btn btn-primary\">Yenilə parolu</button>\n                <p *ngIf=\"message\">{{ message }}</p>\n            </form>\n        </div>\n    </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}