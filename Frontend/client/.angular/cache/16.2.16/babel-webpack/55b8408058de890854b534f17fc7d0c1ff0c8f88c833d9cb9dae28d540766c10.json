{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.errorMessage = null;\n    this.loginResponse$ = null;\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', [Validators.required]] // Password input field\n    });\n  }\n\n  get userName() {\n    return this.loginForm.get('userName');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value\n    };\n    // Login işlemi başlatılır\n    this.loginResponse$ = this.accountService.login(loginData);\n    // Observable'ı subscribe ederek, yanıtı kontrol et\n    this.loginResponse$.subscribe({\n      next: response => {\n        console.log('Login başarılı:', response);\n        if (response.success) {\n          // Başarılı login sonrası yönlendirme\n          this.router.navigate(['home']);\n        } else {\n          this.errorMessage = 'Login başarısız';\n        }\n      },\n      error: error => {\n        console.error('Login başarısız:', error);\n        this.errorMessage = 'Bir hata oluştu';\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","accountService","router","errorMessage","loginResponse$","loginForm","group","userName","required","password","get","onSubmit","invalid","console","error","loginData","value","login","subscribe","next","response","log","success","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  errorMessage: string | null = null;\n  loginResponse$: Observable<any> | null = null;\n  constructor(private fb: FormBuilder, private accountService: AccountService, private router: Router) {\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required], // UserName input field\n      password: ['', [Validators.required]], // Password input field\n    });\n  }\n\n  get userName(): AbstractControl {\n    return this.loginForm.get('userName')!;\n  }\n\n  get password(): AbstractControl {\n    return this.loginForm.get('password')!;\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n  \n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value,\n    };\n  \n    // Login işlemi başlatılır\n    this.loginResponse$ = this.accountService.login(loginData); \n    \n    // Observable'ı subscribe ederek, yanıtı kontrol et\n    this.loginResponse$.subscribe({\n      next: (response) => {\n        console.log('Login başarılı:', response);\n        if (response.success) {\n          // Başarılı login sonrası yönlendirme\n          this.router.navigate(['home']);\n        } else {\n          this.errorMessage = 'Login başarısız';\n        }\n      },\n      error: (error) => {\n        console.error('Login başarısız:', error);\n        this.errorMessage = 'Bir hata oluştu';\n      }\n    });\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAkDC,UAAU,QAAQ,gBAAgB;AAU7E,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,EAAe,EAAUC,cAA8B,EAAUC,MAAc;IAA/E,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAF3F,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,cAAc,GAA2B,IAAI;IAE3C,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,CAAC,CAAC,CAAE;KACxC,CAAC;EACJ;;EAEA,IAAID,QAAQA,CAAA;IACV,OAAO,IAAI,CAACF,SAAS,CAACK,GAAG,CAAC,UAAU,CAAE;EACxC;EAEA,IAAID,QAAQA,CAAA;IACV,OAAO,IAAI,CAACJ,SAAS,CAACK,GAAG,CAAC,UAAU,CAAE;EACxC;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACN,SAAS,CAACO,OAAO,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,MAAMC,SAAS,GAAG;MAChBR,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC,EAAEM,KAAK;MAC/CP,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACK,GAAG,CAAC,UAAU,CAAC,EAAEM;KAC3C;IAED;IACA,IAAI,CAACZ,cAAc,GAAG,IAAI,CAACH,cAAc,CAACgB,KAAK,CAACF,SAAS,CAAC;IAE1D;IACA,IAAI,CAACX,cAAc,CAACc,SAAS,CAAC;MAC5BC,IAAI,EAAGC,QAAQ,IAAI;QACjBP,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAED,QAAQ,CAAC;QACxC,IAAIA,QAAQ,CAACE,OAAO,EAAE;UACpB;UACA,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/B,MAAM;UACL,IAAI,CAACpB,YAAY,GAAG,iBAAiB;;MAEzC,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAI;QACfD,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxC,IAAI,CAACX,YAAY,GAAG,iBAAiB;MACvC;KACD,CAAC;EACJ;CAED;AAnDYL,cAAc,GAAA0B,UAAA,EAL1B5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW7B,cAAc,CAmD1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}