{"ast":null,"code":"import { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.UserDto = [];\n  }\n  getUsers() {\n    return this.http.get(`${this.baseUrl}Account/users`).pipe(map(response => response.$values));\n  }\n  getRegisterRole(payload) {\n    return this.http.post(`${this.baseUrl}Account/register/role`, payload);\n  }\n  changeRole(userId, roles) {\n    const payload = new FormData();\n    payload.append('UserId', userId);\n    roles.forEach((role, index) => payload.append(`Roles[${index}]`, role));\n    return this.http.post(`${this.baseUrl}Account/change-role`, payload);\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","environment","UserService","constructor","http","baseUrl","apiUrl","UserDto","getUsers","get","pipe","response","$values","getRegisterRole","payload","post","changeRole","userId","roles","FormData","append","forEach","role","index","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserDto } from 'src/app/shared/models/UserDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private baseUrl = environment.apiUrl;\n  UserDto: any[] = [];\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<UserDto[]>{\n    return this.http.get<any>(`${this.baseUrl}Account/users`).pipe(\n      map((response) => response.$values) \n    );\n  }\n  getRegisterRole(payload: any): Observable<any>{\n    return this.http.post(`${this.baseUrl}Account/register/role`, payload)\n  }\n\n  changeRole(userId: string, roles: string[]): Observable<any> {\n    const payload = new FormData();\n    payload.append('UserId', userId);\n    roles.forEach((role, index) => payload.append(`Roles[${index}]`, role));\n  \n    return this.http.post(`${this.baseUrl}Account/change-role`, payload);\n  }\n  \n}\n"],"mappings":"AAEA,SAASA,GAAG,QAAoB,MAAM;AACtC,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;IACpC,KAAAC,OAAO,GAAU,EAAE;EACqB;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAM,GAAG,IAAI,CAACJ,OAAO,eAAe,CAAC,CAACK,IAAI,CAC5DV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CACpC;EACH;EACAC,eAAeA,CAACC,OAAY;IAC1B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,OAAO,uBAAuB,EAAES,OAAO,CAAC;EACxE;EAEAE,UAAUA,CAACC,MAAc,EAAEC,KAAe;IACxC,MAAMJ,OAAO,GAAG,IAAIK,QAAQ,EAAE;IAC9BL,OAAO,CAACM,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC;IAChCC,KAAK,CAACG,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKT,OAAO,CAACM,MAAM,CAAC,SAASG,KAAK,GAAG,EAAED,IAAI,CAAC,CAAC;IAEvE,OAAO,IAAI,CAAClB,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,OAAO,qBAAqB,EAAES,OAAO,CAAC;EACtE;;;uBApBWZ,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXzB,WAAW;MAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}