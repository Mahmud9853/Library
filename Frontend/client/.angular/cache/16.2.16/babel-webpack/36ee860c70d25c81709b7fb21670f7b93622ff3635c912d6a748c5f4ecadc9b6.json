{"ast":null,"code":"import { ReplaySubject, map, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n  }\n  loadCurrentUser(token) {\n    if (token === null) {\n      this.currentUserSource.next(null);\n      return of(null);\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.baseUrl + 'account', {\n      headers\n    }).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('token', user.token);\n        this.currentUserSource.next(user);\n        return user;\n      } else {\n        return null;\n      }\n    }));\n  }\n  login(values) {\n    return this.http.post(this.baseUrl + 'account/login', values).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.currentUserSource.next(user);\n    }));\n  }\n  register(values) {\n    return this.http.post(this.baseUrl + 'account/register', values).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.currentUserSource.next(user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSource.next(null);\n    this.router.navigateByUrl('/');\n  }\n  checkEmailExists(email) {\n    return this.http.get(this.baseUrl + 'account/emailExists?email=' + email);\n  }\n  getUserAddress() {\n    return this.http.get(this.baseUrl + 'account/address');\n  }\n  updateUserAddress(address) {\n    return this.http.put(this.baseUrl + 'account/address', address);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","map","of","environment","HttpHeaders","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","loadCurrentUser","token","next","headers","set","get","pipe","user","localStorage","setItem","login","values","post","register","logout","removeItem","navigateByUrl","checkEmailExists","email","getUserAddress","updateUserAddress","address","put","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ReplaySubject, map, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Address, User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  loadCurrentUser(token: string | null){\n    if (token === null) {\n      this.currentUserSource.next(null);\n      return of(null);\n    }\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n\n    return this.http.get<User>(this.baseUrl + 'account', {headers}).pipe(\n      map(user => {\n        if (user) {\n          localStorage.setItem('token', user.token);\n          this.currentUserSource.next(user);\n          return user;\n        }else{\n          return null\n        }\n      })\n    )\n  }\n\n  login(values: any) {\n    return this.http.post<User>(this.baseUrl + 'account/login', values).pipe(\n      map(user => {\n        localStorage.setItem('token', user.token);\n        this.currentUserSource.next(user);\n        \n      })\n    )\n  }\n\n  register(values: any) {\n    return this.http.post<User>(this.baseUrl + 'account/register', values).pipe(\n      map(user => {\n        localStorage.setItem('token', user.token);\n        this.currentUserSource.next(user);\n      })\n    )\n  }\n\n  logout(){\n    localStorage.removeItem('token');\n    this.currentUserSource.next(null);\n    this.router.navigateByUrl('/');\n  }\n  checkEmailExists(email: string){\n    return this.http.get<boolean>(this.baseUrl + 'account/emailExists?email=' + email);\n  }\n\n  getUserAddress() {\n    return this.http.get<Address>(this.baseUrl + 'account/address');\n  }\n\n  updateUserAddress(address: Address) {\n    return this.http.put(this.baseUrl + 'account/address', address);\n  }\n\n \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}