{"ast":null,"code":"import { map, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.UserDto = [];\n  }\n  getUsers() {\n    return this.http.get(`${this.baseUrl}Account/users`).pipe(map(response => response.$values));\n  }\n  getRoles() {\n    return this.http.get(`${this.baseUrl}Account/roles`).pipe(tap(response => console.log(\"API Backend Response:\", response)),\n    // Yanıtı konsola yazdırır\n    map(response => response.$values) // Veriyi dönüştürmeye devam eder\n    );\n  }\n\n  changeUserRole(userId, roles) {\n    const formData = new FormData();\n    formData.append('UserId', userId);\n    roles.forEach((role, index) => formData.append(`Roles[${index}]`, role));\n    return this.http.post(`${this.baseUrl}Account/change-role`, formData);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.baseUrl}Account/delete/${id}`);\n  }\n  updateUser(id, user) {\n    return this.http.put(`${this.baseUrl}Account/update/${id}`, user);\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","tap","environment","UserService","constructor","http","baseUrl","apiUrl","UserDto","getUsers","get","pipe","response","$values","getRoles","console","log","changeUserRole","userId","roles","formData","FormData","append","forEach","role","index","post","deleteUser","id","delete","updateUser","user","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserDto } from 'src/app/shared/models/UserDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private baseUrl = environment.apiUrl;\n  UserDto: any[] = [];\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<UserDto[]>{\n    return this.http.get<any>(`${this.baseUrl}Account/users`).pipe(\n      map((response) => response.$values) \n    );\n  }\n  getRoles(): Observable<string[]> {\n    return this.http.get<any>(`${this.baseUrl}Account/roles`).pipe(\n      tap((response: any) => console.log(\"API Backend Response:\", response)), // Yanıtı konsola yazdırır\n      map((response) => response.$values) // Veriyi dönüştürmeye devam eder\n    );\n  }\n\n  changeUserRole(userId: string, roles: string[]): Observable<any> {\n    const formData = new FormData();\n    formData.append('UserId', userId);\n    roles.forEach((role, index) => formData.append(`Roles[${index}]`, role));\n\n    return this.http.post(`${this.baseUrl}Account/change-role`, formData);\n  }\n  deleteUser(id:string) {\n      return this.http.delete(`${this.baseUrl}Account/delete/${id}`);\n  }\n  updateUser(id: number, user: any) {\n    return this.http.put(`${this.baseUrl}Account/update/${id}`, user);\n  }\n  \n  \n}\n"],"mappings":"AAEA,SAASA,GAAG,EAAcC,GAAG,QAAQ,MAAM;AAC3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;IACpC,KAAAC,OAAO,GAAU,EAAE;EACqB;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAM,GAAG,IAAI,CAACJ,OAAO,eAAe,CAAC,CAACK,IAAI,CAC5DX,GAAG,CAAEY,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CACpC;EACH;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAM,GAAG,IAAI,CAACJ,OAAO,eAAe,CAAC,CAACK,IAAI,CAC5DV,GAAG,CAAEW,QAAa,IAAKG,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,QAAQ,CAAC,CAAC;IAAE;IACxEZ,GAAG,CAAEY,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;KACrC;EACH;;EAEAI,cAAcA,CAACC,MAAc,EAAEC,KAAe;IAC5C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEJ,MAAM,CAAC;IACjCC,KAAK,CAACI,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKL,QAAQ,CAACE,MAAM,CAAC,SAASG,KAAK,GAAG,EAAED,IAAI,CAAC,CAAC;IAExE,OAAO,IAAI,CAACnB,IAAI,CAACqB,IAAI,CAAC,GAAG,IAAI,CAACpB,OAAO,qBAAqB,EAAEc,QAAQ,CAAC;EACvE;EACAO,UAAUA,CAACC,EAAS;IAChB,OAAO,IAAI,CAACvB,IAAI,CAACwB,MAAM,CAAC,GAAG,IAAI,CAACvB,OAAO,kBAAkBsB,EAAE,EAAE,CAAC;EAClE;EACAE,UAAUA,CAACF,EAAU,EAAEG,IAAS;IAC9B,OAAO,IAAI,CAAC1B,IAAI,CAAC2B,GAAG,CAAC,GAAG,IAAI,CAAC1B,OAAO,kBAAkBsB,EAAE,EAAE,EAAEG,IAAI,CAAC;EACnE;;;uBA7BW5B,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXjC,WAAW;MAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}