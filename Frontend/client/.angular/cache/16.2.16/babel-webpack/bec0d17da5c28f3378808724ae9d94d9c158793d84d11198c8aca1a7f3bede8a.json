{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n    this.types = [];\n    this.authors = [];\n  }\n  getBookss(bookParams) {\n    let params = new HttpParams();\n    if (bookParams.search) params = params.append('search', bookParams.search);\n    if (bookParams.pageNumber) params = params.append('pageNumber', bookParams.pageNumber.toString());\n    if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n    if (bookParams.typeId) params = params.append('typeId', bookParams.typeId.toString());\n    if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId.toString());\n    if (bookParams.authorId) params = params.append('authorId', bookParams.authorId.toString());\n    return this.http.get(`${this.baseUrl}Book/query`, {\n      params\n    }).pipe(map(response => {\n      const books = response.books?.$values || [];\n      const totalRecords = response.totalRecords || 0;\n      return {\n        books,\n        totalRecords\n      };\n    }));\n  }\n  // getBookss(bookParams: BookParams): Observable<{ books: Book[]; totalRecords: number }> {\n  //   let params = new HttpParams();\n  //   if (bookParams.search) params = params.append('search', bookParams.search);\n  //   if (bookParams.pageNumber) params = params.append('currentPage', bookParams.pageNumber.toString());\n  //   if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n  //   if (bookParams.typeId) params = params.append('typeId', bookParams.typeId);\n  //   if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId);\n  //   if (bookParams.authorId) params = params.append('authorId', bookParams.authorId);\n  //   return this.http.get<any>(`${this.baseUrl}Book/query`, { params }).pipe(\n  //     map((response) => {\n  //       const books = response.books?.$values || []; // $values içindeki verileri al\n  //       const totalRecords = response.totalRecords || 0;\n  //       return { books, totalRecords };\n  //     })\n  //   );\n  // }\n  getBooks() {\n    return this.http.get(this.baseUrl + 'Book').pipe(map(response => response.$values) // $values içindeki verileri alın\n    );\n  }\n\n  getTypes() {\n    return this.http.get(this.baseUrl + 'Type').pipe(map(response => response.$values) // $values içindeki verileri alın\n    );\n  }\n\n  getAuthors() {\n    return this.http.get(this.baseUrl + 'Author').pipe(map(response => response.$values) // $values içindeki verileri alın\n    );\n  }\n\n  getCategories() {\n    return this.http.get(this.baseUrl + 'Category').pipe(map(response => response.$values) // $values içindeki verileri alın\n    );\n  }\n  // getBooks(bookParams: BookParams): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber.toString())\n  //     .set('pageSize', bookParams.pageSize.toString());\n  //   if (bookParams.search) {\n  //     params = params.set('search', bookParams.search);\n  //   }\n  //   if (bookParams.typeId) {\n  //     params = params.set('typeId', bookParams.typeId);\n  //   }\n  //   if (bookParams.categoryId) {\n  //     params = params.set('categoryId', bookParams.categoryId);\n  //   }\n  //   if (bookParams.authorId) {\n  //     params = params.set('authorId', bookParams.authorId);\n  //   }\n  //   return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n  //     map((response) => {\n  //       return {\n  //         books: response.$values,\n  //         totalCount: response.totalCount,\n  //       };\n  //     })\n  //   );\n  // }\n  addBook(book, headers) {\n    return this.http.post(this.baseUrl + 'Book/create', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book/update'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}Book/${id}`, {\n      responseType: 'text'\n    });\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  getDownloadBook(id) {\n    const url = `${this.baseUrl}Book/download/${id}`;\n    return this.http.get(url, {\n      responseType: 'blob'\n    });\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","map","BookService","constructor","http","baseUrl","apiUrl","books","types","authors","getBookss","bookParams","params","search","append","pageNumber","toString","pageSize","typeId","categoryId","authorId","get","pipe","response","$values","totalRecords","getBooks","getTypes","getAuthors","getCategories","addBook","book","headers","post","updateBook","id","put","deleteBook","delete","responseType","getBookById","getDownloadBook","url","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable} from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book, PaginatedResponse} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { Type } from 'src/app/shared/models/type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books:  any[] = [];\n  types: any[] = [];\n  authors: any[] = [];\n  constructor(private http: HttpClient) { }\n\n  getBookss(bookParams: BookParams): Observable<{ books: Book[]; totalRecords: number }> {\n    let params = new HttpParams();\n  \n    if (bookParams.search) params = params.append('search', bookParams.search);\n    if (bookParams.pageNumber) params = params.append('pageNumber', bookParams.pageNumber.toString());\n    if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n    if (bookParams.typeId) params = params.append('typeId', bookParams.typeId.toString());\n    if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId.toString());\n    if (bookParams.authorId) params = params.append('authorId', bookParams.authorId.toString());\n  \n    return this.http.get<any>(`${this.baseUrl}Book/query`, { params }).pipe(\n      map((response) => {\n        const books = response.books?.$values || [];\n        const totalRecords = response.totalRecords || 0;\n        return { books, totalRecords };\n      })\n    );\n  }\n  \n  // getBookss(bookParams: BookParams): Observable<{ books: Book[]; totalRecords: number }> {\n  //   let params = new HttpParams();\n  \n  //   if (bookParams.search) params = params.append('search', bookParams.search);\n  //   if (bookParams.pageNumber) params = params.append('currentPage', bookParams.pageNumber.toString());\n  //   if (bookParams.pageSize) params = params.append('pageSize', bookParams.pageSize.toString());\n  //   if (bookParams.typeId) params = params.append('typeId', bookParams.typeId);\n  //   if (bookParams.categoryId) params = params.append('categoryId', bookParams.categoryId);\n  //   if (bookParams.authorId) params = params.append('authorId', bookParams.authorId);\n  \n  //   return this.http.get<any>(`${this.baseUrl}Book/query`, { params }).pipe(\n  //     map((response) => {\n  //       const books = response.books?.$values || []; // $values içindeki verileri al\n  //       const totalRecords = response.totalRecords || 0;\n  //       return { books, totalRecords };\n  //     })\n  //   );\n  // }\n  \n  \n  getBooks(): Observable<Book[]> {\n    return this.http.get<any>(this.baseUrl + 'Book').pipe(\n      map((response) => response.$values) // $values içindeki verileri alın\n    );\n  }\n  getTypes(): Observable<any[]> {\n    return this.http.get<any>(this.baseUrl + 'Type').pipe(\n      map((response) => response.$values) // $values içindeki verileri alın\n    );\n  }\n  getAuthors(): Observable<any[]> {\n    return this.http.get<any>(this.baseUrl + 'Author').pipe(\n      map((response) => response.$values) // $values içindeki verileri alın\n    );\n  }\n  getCategories(): Observable<any[]> {\n    return this.http.get<any>(this.baseUrl + 'Category').pipe(\n      map((response) => response.$values) // $values içindeki verileri alın\n    );\n  }\n  // getBooks(bookParams: BookParams): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber.toString())\n  //     .set('pageSize', bookParams.pageSize.toString());\n  \n  //   if (bookParams.search) {\n  //     params = params.set('search', bookParams.search);\n  //   }\n  //   if (bookParams.typeId) {\n  //     params = params.set('typeId', bookParams.typeId);\n  //   }\n  //   if (bookParams.categoryId) {\n  //     params = params.set('categoryId', bookParams.categoryId);\n  //   }\n  //   if (bookParams.authorId) {\n  //     params = params.set('authorId', bookParams.authorId);\n  //   }\n  \n  //   return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n  //     map((response) => {\n  //       return {\n  //         books: response.$values,\n  //         totalCount: response.totalCount,\n  //       };\n  //     })\n  //   );\n  // }\n  \n  \n  addBook(book: any, headers: HttpHeaders): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create', book);\n  }\n  updateBook(id:number, book:any): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book/update'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}Book/${id}`, {\n    responseType: 'text' as 'json'\n    });\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  getDownloadBook(id: number): Observable<Blob> {\n    const url = `${this.baseUrl}Book/download/${id}`;\n    return this.http.get(url, { responseType: 'blob' });\n  }\n  \n\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  \n  // getBooks(bookParams: any): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber || 1)\n  //     .set('pageSize', bookParams.pageSize || 10);\n\n  //   if (bookParams.search) params = params.set('search', bookParams.search);\n  //   if (bookParams.typeId) params = params.set('typeId', bookParams.typeId);\n  //   if (bookParams.categoryId) params = params.set('categoryId', bookParams.categoryId);\n  //   if (bookParams.authorId) params = params.set('authorId', bookParams.authorId);\n\n  //   return this.http.get<any>(`${this.baseUrl}Book/query`, { params });\n  // }\n \n\n \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}