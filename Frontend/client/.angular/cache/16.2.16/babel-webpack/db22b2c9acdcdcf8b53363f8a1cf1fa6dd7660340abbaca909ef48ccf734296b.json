{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../author.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class AuthorEditComponent {\n  constructor(authorService, router, route) {\n    this.authorService = authorService;\n    this.router = router;\n    this.route = route;\n    this.author = {\n      id: 0,\n      name: ''\n    };\n  }\n  ngOnInit() {\n    const authorId = this.route.snapshot.params['id'];\n    if (authorId) {\n      this.loadAuthor();\n    }\n  }\n  loadAuthor() {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    if (id) {\n      this.authorService.getAuthorById(id).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n          this.author = response;\n        },\n        error: error => {\n          console.error('Error loading type details:', error);\n        }\n      });\n    }\n  }\n  updateAuthor() {\n    const formData = new FormData();\n    formData.append('fullName', this.author.fullName);\n    this.authorService.updateAuthor(this.author.id, formData).subscribe({\n      next: response => {\n        console.log('Type updated successfully:', response);\n        // Backend'den dönen güncellenmiş veriyi atayın\n        this.author = response;\n        this.router.navigate(['/admin/author/author-list']); // Başarılı güncelleme sonrası yönlendirme\n      },\n\n      error: error => {\n        console.error('Error updating type:', error);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthorEditComponent_Factory(t) {\n      return new (t || AuthorEditComponent)(i0.ɵɵdirectiveInject(i1.AuthorService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AuthorEditComponent,\n      selectors: [[\"app-author-edit\"]],\n      decls: 10,\n      vars: 1,\n      consts: [[1, \"container\", \"mt-5\"], [1, \"mb-4\"], [3, \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"name\", \"type\", \"text\", \"name\", \"name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n      template: function AuthorEditComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2, \"Edit Author\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function AuthorEditComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.updateAuthor();\n          });\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Tipi:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function AuthorEditComponent_Template_input_ngModelChange_7_listener($event) {\n            return ctx.author.fullName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"button\", 6);\n          i0.ɵɵtext(9, \"Update Type\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngModel\", ctx.author.fullName);\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["AuthorEditComponent","constructor","authorService","router","route","author","id","name","ngOnInit","authorId","snapshot","params","loadAuthor","Number","paramMap","get","getAuthorById","subscribe","next","response","console","log","error","updateAuthor","formData","FormData","append","fullName","navigate","i0","ɵɵdirectiveInject","i1","AuthorService","i2","Router","ActivatedRoute","selectors","decls","vars","consts","template","AuthorEditComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","AuthorEditComponent_Template_form_ngSubmit_3_listener","AuthorEditComponent_Template_input_ngModelChange_7_listener","$event","ɵɵadvance","ɵɵproperty"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\author\\author-edit\\author-edit.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\admin\\author\\author-edit\\author-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthorService } from '../author.service';\n\n@Component({\n  selector: 'app-author-edit',\n  templateUrl: './author-edit.component.html',\n  styleUrls: ['./author-edit.component.scss']\n})\nexport class AuthorEditComponent implements OnInit {\n  author: any = {\n    id: 0,\n    name:'',\n  };\n  \n  constructor(private authorService: AuthorService, private router: Router, private route: ActivatedRoute){}\n\n  ngOnInit(): void {\n\n    const authorId = this.route.snapshot.params['id'];\n    if (authorId) {\n      this.loadAuthor();\n    }\n  }\n  loadAuthor() {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    if (id) {\n      this.authorService.getAuthorById(id).subscribe({\n        next: (response: any) => {\n          console.log('API Response:', response);\n          this.author = response;\n        },\n        error: (error) => {\n          console.error('Error loading type details:', error);\n        }\n      });\n    }\n  }\n\n  updateAuthor() {\n    const formData = new FormData();\n    formData.append('fullName', this.author.fullName);\n  \n    this.authorService.updateAuthor(this.author.id, formData).subscribe({\n      next: (response: any) => {\n        console.log('Type updated successfully:', response);\n        // Backend'den dönen güncellenmiş veriyi atayın\n        this.author = response;\n        this.router.navigate(['/admin/author/author-list']); // Başarılı güncelleme sonrası yönlendirme\n      },\n      error: (error) => {\n        console.error('Error updating type:', error);\n      }\n    });\n  }\n}\n","<div class=\"container mt-5\">\n    <h2 class=\"mb-4\">Edit Author</h2>\n    <form (ngSubmit)=\"updateAuthor()\">\n      <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Tipi:</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          class=\"form-control\"\n          [(ngModel)]=\"author.fullName\"\n          name=\"name\"\n          required\n        />\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\">Update Type</button>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}