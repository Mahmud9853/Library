{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n  }\n  // getBooks(bookParams: BookParams): Observable<any[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  addBook(book) {\n    return this.http.post(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBooks(params: BookParams): Observable<PaginatedResponse<Book>> {\n  //   const queryParams: any = {\n  //     search: params.search,\n  //     pageNumber: params.pageNumber,\n  //     pageSize: params.pageSize,\n  //     typeId: params.typeId,\n  //     categoryId: params.categoryId,\n  //     authorId: params.authorId\n  //   };\n  //   return this.http.get<PaginatedResponse<Book>>(`${this.baseUrl}Book/query`, { params: queryParams });\n  // }\n  getBooks(filters) {\n    let params = new HttpParams();\n    Object.keys(filters).forEach(key => {\n      if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n        params = params.append(key, filters[key]);\n      }\n    });\n    return this.http.get(`${this.baseUrl}/query`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","BookService","constructor","http","baseUrl","apiUrl","books","addBook","book","post","updateBook","id","put","deleteBook","delete","getBookById","get","getBooks","filters","params","Object","keys","forEach","key","undefined","append","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book, PaginatedResponse} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books:  Book[] = [];\n  constructor(private http: HttpClient) { }\n\n  // getBooks(bookParams: BookParams): Observable<any[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  \n  \n  addBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id:number,book:Book): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n\n  // getBooks(params: BookParams): Observable<PaginatedResponse<Book>> {\n  //   const queryParams: any = {\n  //     search: params.search,\n  //     pageNumber: params.pageNumber,\n  //     pageSize: params.pageSize,\n  //     typeId: params.typeId,\n  //     categoryId: params.categoryId,\n  //     authorId: params.authorId\n  //   };\n  //   return this.http.get<PaginatedResponse<Book>>(`${this.baseUrl}Book/query`, { params: queryParams });\n  // }\n\n  getBooks(filters: any): Observable<any> {\n    let params = new HttpParams();\n\n    Object.keys(filters).forEach((key) => {\n      if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n        params = params.append(key, filters[key]);\n      }\n    });\n\n    return this.http.get<any>(`${this.baseUrl}/query`, { params });\n  }\n \n\n \n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAoBC,UAAU,QAAO,sBAAsB;;;AAQ3D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IAC5B,KAAAC,KAAK,GAAY,EAAE;EACqB;EAExC;EACA;EACA;EACA;EACA;EAGAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACL,OAAO,GAAG,cAAc,EAAEI,IAAI,CAAC;EAClE;EACAE,UAAUA,CAACC,EAAS,EAACH,IAAS;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,OAAO,GAAE,MAAM,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EACnE;EACAK,UAAUA,CAACF,EAAS;IAClB,OAAO,IAAI,CAACR,IAAI,CAACW,MAAM,CAAO,GAAG,IAAI,CAACV,OAAO,SAASO,EAAE,EAAE,CAAC;EAC7D;EACAI,WAAWA,CAACJ,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACZ,OAAO,GAAG,MAAM,IAAIO,EAAE,EAAE,CAAC;EAC9D;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAM,QAAQA,CAACC,OAAY;IACnB,IAAIC,MAAM,GAAG,IAAInB,UAAU,EAAE;IAE7BoB,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAI;MACnC,IAAIL,OAAO,CAACK,GAAG,CAAC,KAAK,IAAI,IAAIL,OAAO,CAACK,GAAG,CAAC,KAAKC,SAAS,IAAIN,OAAO,CAACK,GAAG,CAAC,KAAK,EAAE,EAAE;QAC9EJ,MAAM,GAAGA,MAAM,CAACM,MAAM,CAACF,GAAG,EAAEL,OAAO,CAACK,GAAG,CAAC,CAAC;;IAE7C,CAAC,CAAC;IAEF,OAAO,IAAI,CAACpB,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACZ,OAAO,QAAQ,EAAE;MAAEe;IAAM,CAAE,CAAC;EAChE;;;uBA/CWlB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX5B,WAAW;MAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}