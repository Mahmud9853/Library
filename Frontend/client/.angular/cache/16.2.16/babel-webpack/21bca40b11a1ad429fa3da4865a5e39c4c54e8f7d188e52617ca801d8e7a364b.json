{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeListComponent = class HomeListComponent {\n  constructor(fb, homeService, router, accountService) {\n    this.fb = fb;\n    this.homeService = homeService;\n    this.router = router;\n    this.accountService = accountService;\n    this.homes = [];\n    this.homeToDelete = null;\n    this.role = null;\n    this.role = this.accountService.getRole();\n  }\n  ngOnInit() {\n    this.loadHomes();\n  }\n  loadHomes() {\n    this.homeService.getHomes().subscribe({\n      next: response => {\n        console.log(\"API Response home:\", response);\n        this.homes = response;\n      },\n      error: error => console.error('Error fetching books:', error)\n    });\n  }\n  openDeleteModal(home) {\n    if (this.role !== 'Admin') {\n      console.error('Erişim reddedildi: Sadece Admin silebilir.');\n      return;\n    }\n    this.homeToDelete = home;\n    const deleteModal = document.getElementById('deleteModal');\n    if (deleteModal) {\n      const modal = new window.bootstrap.Modal(deleteModal); // 'window as any' ile tip belirtme\n      modal.show();\n    }\n  }\n  confirmDelete() {\n    if (this.homeToDelete) {\n      if (this.role !== 'Admin') {\n        console.error('Erişim reddedildi: Sadece Admin silebilir.');\n        return;\n      }\n      // API çağrısı yapılır\n      this.homeService.deleteHome(this.homeToDelete.id).subscribe({\n        next: response => {\n          // Silme işleminden sonra kitap listesine ekleme\n          console.log('Delete response:', response); // '4: Deleted.'\n          this.homes = this.homes.filter(b => b.id !== this.homeToDelete.id);\n          // Modalı kapat\n          const deleteModal = document.getElementById('deleteModal');\n          if (deleteModal) {\n            const modalInstance = window.bootstrap.Modal.getInstance(deleteModal);\n            modalInstance?.hide(); // Modal'ı kapat\n          }\n          // Kitaplar silindikten sonra yönlendirme yapılır\n          this.router.navigate(['/admin/home/home-list']);\n          this.homeToDelete = null;\n        },\n        error: err => {\n          console.error('Error deleting book:', err);\n        }\n      });\n    }\n  }\n};\nHomeListComponent = __decorate([Component({\n  selector: 'app-home-list',\n  templateUrl: './home-list.component.html',\n  styleUrls: ['./home-list.component.scss']\n})], HomeListComponent);","map":{"version":3,"names":["Component","HomeListComponent","constructor","fb","homeService","router","accountService","homes","homeToDelete","role","getRole","ngOnInit","loadHomes","getHomes","subscribe","next","response","console","log","error","openDeleteModal","home","deleteModal","document","getElementById","modal","window","bootstrap","Modal","show","confirmDelete","deleteHome","id","filter","b","modalInstance","getInstance","hide","navigate","err","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\home\\home-list\\home-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { HomeService } from '../home.service';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from 'src/app/account/account.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-home-list',\r\n  templateUrl: './home-list.component.html',\r\n  styleUrls: ['./home-list.component.scss']\r\n})\r\nexport class HomeListComponent implements OnInit {\r\n  homes: any[] =[];\r\n\r\n  home: any;\r\n  homeToDelete: any = null;\r\n  role: string | null = null;\r\n   constructor(private fb: FormBuilder, private homeService: HomeService, private router: Router, private accountService: AccountService) {\r\n    this.role = this.accountService.getRole();\r\n   }\r\n\r\n  \r\n  ngOnInit(): void {\r\n    this.loadHomes();\r\n  }\r\n  loadHomes() {\r\n    this.homeService.getHomes().subscribe({\r\n      next: (response) =>{\r\n        console.log(\"API Response home:\", response);\r\n        this.homes = response;\r\n      },\r\n      error: (error) => console.error('Error fetching books:', error)\r\n    });\r\n  }\r\n\r\n\r\n  openDeleteModal(home: any) {\r\n    if (this.role !== 'Admin') {\r\n      console.error('Erişim reddedildi: Sadece Admin silebilir.');\r\n      return;\r\n    }\r\n    this.homeToDelete = home;\r\n    const deleteModal = document.getElementById('deleteModal');\r\n    if (deleteModal) {\r\n      const modal = new (window as any).bootstrap.Modal(deleteModal); // 'window as any' ile tip belirtme\r\n      modal.show();\r\n    \r\n    }\r\n  }\r\n  confirmDelete() {\r\n    if (this.homeToDelete) {\r\n      if (this.role !== 'Admin') {\r\n        console.error('Erişim reddedildi: Sadece Admin silebilir.');\r\n        return;\r\n      }\r\n      // API çağrısı yapılır\r\n      this.homeService.deleteHome(this.homeToDelete.id).subscribe({\r\n        next: (response: string) => {\r\n          // Silme işleminden sonra kitap listesine ekleme\r\n          console.log('Delete response:', response); // '4: Deleted.'\r\n          this.homes = this.homes.filter((b) => b.id !== this.homeToDelete.id);\r\n  \r\n          // Modalı kapat\r\n          const deleteModal = document.getElementById('deleteModal');\r\n          if (deleteModal) {\r\n            const modalInstance = (window as any).bootstrap.Modal.getInstance(deleteModal);\r\n            modalInstance?.hide(); // Modal'ı kapat\r\n          }\r\n  \r\n          // Kitaplar silindikten sonra yönlendirme yapılır\r\n          this.router.navigate(['/admin/home/home-list']);\r\n          this.homeToDelete = null;\r\n        },\r\n        error: (err) => {\r\n          console.error('Error deleting book:', err);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}