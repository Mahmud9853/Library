{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n  }\n  // getBooks(bookParams?: BookParams): Observable<Book[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  addBook(book) {\n    return this.http.post(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  getBooks(params) {\n    let queryParams = new HttpParams();\n    if (params.search) queryParams = queryParams.set('search', params.search);\n    if (params.typeId) queryParams = queryParams.set('typeId', params.typeId);\n    if (params.categoryId) queryParams = queryParams.set('categoryId', params.categoryId);\n    if (params.authorId) queryParams = queryParams.set('authorId', params.authorId);\n    queryParams = queryParams.set('pageNumber', params.pageNumber || 1);\n    queryParams = queryParams.set('pageSize', params.pageSize || 10);\n    return this.http.get(`${this.baseUrl}/query`, {\n      params: queryParams\n    });\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","BookService","constructor","http","baseUrl","apiUrl","books","addBook","book","post","updateBook","id","put","deleteBook","delete","getBookById","get","getBooks","params","queryParams","search","set","typeId","categoryId","authorId","pageNumber","pageSize","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { BookResponseDto } from 'src/app/shared/models/bookResponseDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books: Book[] = [];\n  constructor(private http: HttpClient) { }\n\n  // getBooks(bookParams?: BookParams): Observable<Book[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  \n  addBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id:number,book:Book): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  getBooks(params: any): Observable<any> {\n    let queryParams = new HttpParams();\n    if (params.search) queryParams = queryParams.set('search', params.search);\n    if (params.typeId) queryParams = queryParams.set('typeId', params.typeId);\n    if (params.categoryId) queryParams = queryParams.set('categoryId', params.categoryId);\n    if (params.authorId) queryParams = queryParams.set('authorId', params.authorId);\n    queryParams = queryParams.set('pageNumber', params.pageNumber || 1);\n    queryParams = queryParams.set('pageSize', params.pageSize || 10);\n\n    return this.http.get<any>(`${this.baseUrl}/query`, { params: queryParams });\n  }\n\n \n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAoBC,UAAU,QAAO,sBAAsB;;;AAS3D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IAC5B,KAAAC,KAAK,GAAW,EAAE;EACsB;EAExC;EACA;EACA;EACA;EACA;EAEAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACL,OAAO,GAAG,cAAc,EAAEI,IAAI,CAAC;EAClE;EACAE,UAAUA,CAACC,EAAS,EAACH,IAAS;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,OAAO,GAAE,MAAM,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EACnE;EACAK,UAAUA,CAACF,EAAS;IAClB,OAAO,IAAI,CAACR,IAAI,CAACW,MAAM,CAAO,GAAG,IAAI,CAACV,OAAO,SAASO,EAAE,EAAE,CAAC;EAC7D;EACAI,WAAWA,CAACJ,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACZ,OAAO,GAAG,MAAM,IAAIO,EAAE,EAAE,CAAC;EAC9D;EACA;EACA;EACA;EACA;EACA;EACAM,QAAQA,CAACC,MAAW;IAClB,IAAIC,WAAW,GAAG,IAAInB,UAAU,EAAE;IAClC,IAAIkB,MAAM,CAACE,MAAM,EAAED,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACE,MAAM,CAAC;IACzE,IAAIF,MAAM,CAACI,MAAM,EAAEH,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACI,MAAM,CAAC;IACzE,IAAIJ,MAAM,CAACK,UAAU,EAAEJ,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,YAAY,EAAEH,MAAM,CAACK,UAAU,CAAC;IACrF,IAAIL,MAAM,CAACM,QAAQ,EAAEL,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,UAAU,EAAEH,MAAM,CAACM,QAAQ,CAAC;IAC/EL,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,YAAY,EAAEH,MAAM,CAACO,UAAU,IAAI,CAAC,CAAC;IACnEN,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAC,UAAU,EAAEH,MAAM,CAACQ,QAAQ,IAAI,EAAE,CAAC;IAEhE,OAAO,IAAI,CAACvB,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACZ,OAAO,QAAQ,EAAE;MAAEc,MAAM,EAAEC;IAAW,CAAE,CAAC;EAC7E;;;uBAtCWlB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX7B,WAAW;MAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}