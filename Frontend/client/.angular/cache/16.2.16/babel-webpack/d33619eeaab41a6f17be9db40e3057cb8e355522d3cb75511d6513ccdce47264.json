{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.books = [];\n  }\n  // getBooks(bookParams?: BookParams): Observable<Book[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  getBooks(bookParams) {\n    let params = new HttpParams().set('currentPage', bookParams.pageNumber.toString()).set('pageSize', bookParams.pageSize.toString());\n    if (bookParams.search) {\n      params = params.set('search', bookParams.search);\n    }\n    if (bookParams.typeId) {\n      params = params.set('typeId', bookParams.typeId);\n    }\n    if (bookParams.categoryId) {\n      params = params.set('categoryId', bookParams.categoryId);\n    }\n    if (bookParams.authorId) {\n      params = params.set('authorId', bookParams.authorId);\n    }\n    return this.http.get(`${this.baseUrl}Book/query?`, {\n      params\n    }).pipe(map(response => {\n      return {\n        books: response.$values,\n        totalCount: response.totalCount\n      };\n    }));\n  }\n  addBook(book) {\n    return this.http.post(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id, book) {\n    return this.http.put(`${this.baseUrl + 'Book'}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.http.delete(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id) {\n    return this.http.get(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  static {\n    this.ɵfac = function BookService_Factory(t) {\n      return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookService,\n      factory: BookService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","map","BookService","constructor","http","baseUrl","apiUrl","books","getBooks","bookParams","params","set","pageNumber","toString","pageSize","search","typeId","categoryId","authorId","get","pipe","response","$values","totalCount","addBook","book","post","updateBook","id","put","deleteBook","delete","getBookById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {HttpClient, HttpParams} from '@angular/common/http'\nimport { map, Observable } from 'rxjs';\nimport {Book} from 'src/app/shared/models/book'; \nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { BookResponseDto } from 'src/app/shared/models/bookResponseDto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  baseUrl = environment.apiUrl;\n  books:  B[] = [];\n  constructor(private http: HttpClient) { }\n\n  // getBooks(bookParams?: BookParams): Observable<Book[]> {\n  //   return this.http.get<any>(this.baseUrl + 'Book').pipe(\n  //     map((response) => response.$values) // $values içindeki verileri alın\n  //   );\n  // }\n  getBooks(bookParams: BookParams): Observable<any> {\n    let params = new HttpParams()\n      .set('currentPage', bookParams.pageNumber.toString())\n      .set('pageSize', bookParams.pageSize.toString());\n  \n    if (bookParams.search) {\n      params = params.set('search', bookParams.search);\n    }\n    if (bookParams.typeId) {\n      params = params.set('typeId', bookParams.typeId);\n    }\n    if (bookParams.categoryId) {\n      params = params.set('categoryId', bookParams.categoryId);\n    }\n    if (bookParams.authorId) {\n      params = params.set('authorId', bookParams.authorId);\n    }\n  \n    return this.http.get<any>(`${this.baseUrl}Book/query?`, { params }).pipe(\n      map((response) => {\n        return {\n          books: response.$values,\n          totalCount: response.totalCount,\n        };\n      })\n    );\n  }\n  \n  \n  addBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl + 'Book/create/', book);\n  }\n  updateBook(id:number,book:Book): Observable<Book>{\n    return this.http.put<Book>(`${this.baseUrl+ 'Book'}/${id}`, book);\n  }\n  deleteBook(id:number): Observable<any>{\n    return this.http.delete<void>(`${this.baseUrl}/Book/${id}`);\n  }\n  getBookById(id: number): Observable<Book>{\n    return this.http.get<Book>(`${this.baseUrl + 'Book'}/${id}`);\n  }\n  // getBook(params: any): Observable<{ books: { $values: Book[] }; totalRecords: number }> {\n  //   return this.http.get<{ books: { $values: Book[] }; totalRecords: number }>(\n  //     `${this.baseUrl}/Book/query`, { params }\n  //   );\n  // }\n  \n  // getBooks(bookParams: any): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('currentPage', bookParams.pageNumber || 1)\n  //     .set('pageSize', bookParams.pageSize || 10);\n\n  //   if (bookParams.search) params = params.set('search', bookParams.search);\n  //   if (bookParams.typeId) params = params.set('typeId', bookParams.typeId);\n  //   if (bookParams.categoryId) params = params.set('categoryId', bookParams.categoryId);\n  //   if (bookParams.authorId) params = params.set('authorId', bookParams.authorId);\n\n  //   return this.http.get<any>(`${this.baseUrl}Book/query`, { params });\n  // }\n \n\n \n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAoBC,UAAU,QAAO,sBAAsB;AAC3D,SAASC,GAAG,QAAoB,MAAM;;;AAQtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAGN,WAAW,CAACO,MAAM;IAC5B,KAAAC,KAAK,GAAS,EAAE;EACwB;EAExC;EACA;EACA;EACA;EACA;EACAC,QAAQA,CAACC,UAAsB;IAC7B,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC1BW,GAAG,CAAC,aAAa,EAAEF,UAAU,CAACG,UAAU,CAACC,QAAQ,EAAE,CAAC,CACpDF,GAAG,CAAC,UAAU,EAAEF,UAAU,CAACK,QAAQ,CAACD,QAAQ,EAAE,CAAC;IAElD,IAAIJ,UAAU,CAACM,MAAM,EAAE;MACrBL,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEF,UAAU,CAACM,MAAM,CAAC;;IAElD,IAAIN,UAAU,CAACO,MAAM,EAAE;MACrBN,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEF,UAAU,CAACO,MAAM,CAAC;;IAElD,IAAIP,UAAU,CAACQ,UAAU,EAAE;MACzBP,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,YAAY,EAAEF,UAAU,CAACQ,UAAU,CAAC;;IAE1D,IAAIR,UAAU,CAACS,QAAQ,EAAE;MACvBR,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEF,UAAU,CAACS,QAAQ,CAAC;;IAGtD,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAM,GAAG,IAAI,CAACd,OAAO,aAAa,EAAE;MAAEK;IAAM,CAAE,CAAC,CAACU,IAAI,CACtEnB,GAAG,CAAEoB,QAAQ,IAAI;MACf,OAAO;QACLd,KAAK,EAAEc,QAAQ,CAACC,OAAO;QACvBC,UAAU,EAAEF,QAAQ,CAACE;OACtB;IACH,CAAC,CAAC,CACH;EACH;EAGAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAO,IAAI,CAACrB,OAAO,GAAG,cAAc,EAAEoB,IAAI,CAAC;EAClE;EACAE,UAAUA,CAACC,EAAS,EAACH,IAAS;IAC5B,OAAO,IAAI,CAACrB,IAAI,CAACyB,GAAG,CAAO,GAAG,IAAI,CAACxB,OAAO,GAAE,MAAM,IAAIuB,EAAE,EAAE,EAAEH,IAAI,CAAC;EACnE;EACAK,UAAUA,CAACF,EAAS;IAClB,OAAO,IAAI,CAACxB,IAAI,CAAC2B,MAAM,CAAO,GAAG,IAAI,CAAC1B,OAAO,SAASuB,EAAE,EAAE,CAAC;EAC7D;EACAI,WAAWA,CAACJ,EAAU;IACpB,OAAO,IAAI,CAACxB,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,OAAO,GAAG,MAAM,IAAIuB,EAAE,EAAE,CAAC;EAC9D;;;uBAlDW1B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}