{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n    this.role = null;\n  }\n  register(userData) {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n  login(credentials) {\n    return this.http.post(`${this.baseUrl}Account/login`, credentials).pipe(map(response => {\n      if (response.token) {\n        // Token'ı ve rolü localStorage'a kaydediyoruz\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('role', response.role);\n        this.currentUserSource.next(response);\n      }\n    })); // login endpointi kullanılacak\n  }\n\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getRole() {\n    return localStorage.getItem('role'); // Rol localStorage'den alınır\n  }\n\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setRole(role) {\n    this.role = role;\n    localStorage.setItem('role', role);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","map","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","role","register","userData","post","logout","localStorage","removeItem","navigate","login","credentials","pipe","response","token","setItem","next","saveToken","getToken","getItem","getRole","isLoggedIn","setRole","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, catchError, map, of, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../shared/models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  private role: string | null = null;\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}Account/register`, userData);\n  }\n\n  // login(userData: any): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n  // }\n  // login(loginData: { userName: string, password: string }): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n  // }\n \n  \n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role'); // Rolü kaldır\n    this.router.navigate(['/login']);\n  }\n\n  login(credentials: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}Account/login`, credentials).pipe(\n      map(response => {\n       if (response.token) {\n          // Token'ı ve rolü localStorage'a kaydediyoruz\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('role', response.role);\n          this.currentUserSource.next(response);\n        }\n      })\n    ); // login endpointi kullanılacak\n  }\n  saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n  \n  getRole(): string | null {\n    return localStorage.getItem('role'); // Rol localStorage'den alınır\n  }\n  \n   isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  setRole(role: string): void {\n    this.role = role;\n    localStorage.setItem('role', role);\n  }\n\n \n}\n"],"mappings":"AACA,SAAqBA,aAAa,EAAcC,GAAG,QAA6B,MAAM;AACtF,SAASC,WAAW,QAAQ,8BAA8B;;;;AAQ1D,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IANpD,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IACpB,KAAAC,iBAAiB,GAAG,IAAIT,aAAa,CAAc,CAAC,CAAC;IAC7D,KAAAU,YAAY,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;IAE5C,KAAAC,IAAI,GAAkB,IAAI;EAE8B;EAEhEC,QAAQA,CAACC,QAAa;IACpB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACR,OAAO,kBAAkB,EAAEO,QAAQ,CAAC;EACpE;EAEA;EACA;EACA;EACA;EACA;EACA;EAGAE,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,KAAKA,CAACC,WAAgB;IACpB,OAAO,IAAI,CAAChB,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACR,OAAO,eAAe,EAAEc,WAAW,CAAC,CAACC,IAAI,CAC1ErB,GAAG,CAACsB,QAAQ,IAAG;MACd,IAAIA,QAAQ,CAACC,KAAK,EAAE;QACjB;QACAP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACC,KAAK,CAAC;QAC7CP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEF,QAAQ,CAACX,IAAI,CAAC;QAC3C,IAAI,CAACH,iBAAiB,CAACiB,IAAI,CAACH,QAAQ,CAAC;;IAEzC,CAAC,CAAC,CACH,CAAC,CAAC;EACL;;EACAI,SAASA,CAACH,KAAa;IACrBP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EAEAI,QAAQA,CAAA;IACN,OAAOX,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,OAAOA,CAAA;IACL,OAAOb,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EACvC;;EAECE,UAAUA,CAAA;IACT,OAAO,CAAC,CAACd,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAG,OAAOA,CAACpB,IAAY;IAClB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChBK,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEb,IAAI,CAAC;EACpC;;;uBA3DWT,cAAc,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAdnC,cAAc;MAAAoC,OAAA,EAAdpC,cAAc,CAAAqC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}