{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/account/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.accountService.currentUser$.pipe(map(auth => {\n      if (auth) {\n        return true; // Kullanıcı giriş yapmışsa, erişim sağlanır\n      } else {\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        }); // Login sayfasına yönlendir\n        return false;\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","AuthGuard","constructor","accountService","router","canActivate","route","state","currentUser$","pipe","auth","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","AccountService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateFn, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable, map } from 'rxjs';\nimport { AccountService } from 'src/app/account/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private accountService: AccountService, private router: Router){}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> {\n    return this.accountService.currentUser$.pipe(\n      map(auth => {\n        if (auth) {\n          return true;  // Kullanıcı giriş yapmışsa, erişim sağlanır\n        } else {\n          this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } }); // Login sayfasına yönlendir\n          return false;\n        }\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAMtC,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAU;EAE5EC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,OAAO,IAAI,CAACJ,cAAc,CAACK,YAAY,CAACC,IAAI,CAC1CT,GAAG,CAACU,IAAI,IAAG;MACT,IAAIA,IAAI,EAAE;QACR,OAAO,IAAI,CAAC,CAAE;OACf,MAAM;QACL,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEN,KAAK,CAACO;UAAG;QAAE,CAAE,CAAC,CAAC,CAAC;QACrF,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;;;uBAjBWb,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATnB,SAAS;MAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}