{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/account/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const role = this.accountService.getRole(); // Kullanıcının rolünü al\n    const allowedRoles = route.data['roles']; // İzin verilen roller\n    if (allowedRoles && !allowedRoles.includes(role)) {\n      this.router.navigate(['/']);\n      return false;\n    }\n    if (requiredRole && role !== requiredRole) {\n      // Rol eşleşmiyorsa\n      this.router.navigate(['/']);\n      return false;\n    }\n    return true; // Tüm şartlar sağlanmışsa erişim izni ver\n  }\n\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","accountService","router","canActivate","route","state","role","getRole","allowedRoles","data","includes","navigate","requiredRole","i0","ɵɵinject","i1","AccountService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AccountService } from 'src/app/account/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    const role = this.accountService.getRole(); // Kullanıcının rolünü al\n    const allowedRoles = route.data['roles']; // İzin verilen roller\nif (allowedRoles && !allowedRoles.includes(role)) {\n  this.router.navigate(['/']);\n  return false;\n}\n\n    if (requiredRole && role !== requiredRole) { // Rol eşleşmiyorsa\n      this.router.navigate(['/']);\n      return false;\n    }\n\n    return true; // Tüm şartlar sağlanmışsa erişim izni ver\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAW;EAE7EC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,IAAI,GAAG,IAAI,CAACL,cAAc,CAACM,OAAO,EAAE,CAAC,CAAC;IAC5C,MAAMC,YAAY,GAAGJ,KAAK,CAACK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9C,IAAID,YAAY,IAAI,CAACA,YAAY,CAACE,QAAQ,CAACJ,IAAI,CAAC,EAAE;MAChD,IAAI,CAACJ,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,OAAO,KAAK;;IAGV,IAAIC,YAAY,IAAIN,IAAI,KAAKM,YAAY,EAAE;MAAE;MAC3C,IAAI,CAACV,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,OAAO,KAAK;;IAGd,OAAO,IAAI,CAAC,CAAC;EACf;;;;uBArBWZ,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATnB,SAAS;MAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}