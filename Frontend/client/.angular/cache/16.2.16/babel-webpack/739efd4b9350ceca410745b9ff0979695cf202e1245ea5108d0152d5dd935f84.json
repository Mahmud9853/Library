{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, accountService, router, toastr // Toastr ekledim\n  ) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.toastr = toastr;\n    this.errorMessage = null; // Hata mesajı\n    // Formu oluşturuyoruz, sadece userName ve password gerekli\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', [Validators.required]] // Parola\n    });\n  }\n  // Form kontrol metodları\n  get userName() {\n    return this.loginForm.get('userName');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  // Formu gönderdiğimizde çalışacak metod\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid'); // Form geçersizse hata mesajı\n      return;\n    }\n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value\n    };\n    // Login işlemi başlatıyoruz\n    this.accountService.login(loginData).subscribe({\n      next: response => {\n        console.log('Login successful:', response); // Giriş başarılıysa\n        if (response && response.token && response.role) {\n          // Giriş başarılıysa token ve rol kaydediyoruz\n          this.accountService.saveToken(response.token);\n          this.accountService.setRole(response.role);\n          const userRole = response.role;\n          // Kullanıcının rolüne göre yönlendirme yapıyoruz\n          if (userRole === 'Admin' || userRole === 'Client') {\n            this.router.navigate(['/home']); // Doğru sayfaya yönlendir\n          } else {\n            this.errorMessage = 'Unauthorized role';\n            this.router.navigate(['/account/login']);\n          }\n        } else {\n          this.errorMessage = 'Invalid username or password'; // Hatalı giriş\n          this.toastr.error(this.errorMessage); // Toastr ile hata mesajı göster\n        }\n      },\n\n      error: error => {\n        console.error('Login failed:', error); // Hata mesajı\n        this.errorMessage = 'An error occurred during login'; // Hata mesajı\n        this.toastr.error(this.errorMessage); // Toastr ile hata mesajı göster\n      }\n    });\n  }\n};\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","accountService","router","toastr","errorMessage","loginForm","group","userName","required","password","get","onSubmit","invalid","console","error","loginData","value","login","subscribe","next","response","log","token","role","saveToken","setRole","userRole","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr'; // Hata mesajları için Toastr eklenebilir\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;  // Login formu\n  errorMessage: string | null = null;  // Hata mesajı\n\n  constructor(\n    private fb: FormBuilder,\n    private accountService: AccountService,\n    private router: Router,\n    private toastr: ToastrService  // Toastr ekledim\n  ) {\n    // Formu oluşturuyoruz, sadece userName ve password gerekli\n    this.loginForm = this.fb.group({\n      userName: ['', Validators.required], // Kullanıcı adı\n      password: ['', [Validators.required]], // Parola\n    });\n  }\n\n  // Form kontrol metodları\n  get userName(): AbstractControl {\n    return this.loginForm.get('userName')!;\n  }\n\n  get password(): AbstractControl {\n    return this.loginForm.get('password')!;\n  }\n\n  // Formu gönderdiğimizde çalışacak metod\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      console.error('Form is invalid'); // Form geçersizse hata mesajı\n      return;\n    }\n  \n    const loginData = {\n      userName: this.loginForm.get('userName')?.value,\n      password: this.loginForm.get('password')?.value,\n    };\n\n    // Login işlemi başlatıyoruz\n    this.accountService.login(loginData).subscribe({\n      next: (response) => {\n        console.log('Login successful:', response);  // Giriş başarılıysa\n        if (response && response.token && response.role) {\n          // Giriş başarılıysa token ve rol kaydediyoruz\n          this.accountService.saveToken(response.token);\n          this.accountService.setRole(response.role);\n\n          const userRole = response.role;\n          // Kullanıcının rolüne göre yönlendirme yapıyoruz\n          if (userRole === 'Admin' || userRole === 'Client') {\n            this.router.navigate(['/home']);  // Doğru sayfaya yönlendir\n          } else {\n            this.errorMessage = 'Unauthorized role';\n            this.router.navigate(['/account/login']);\n          }\n        } else {\n          this.errorMessage = 'Invalid username or password';  // Hatalı giriş\n          this.toastr.error(this.errorMessage); // Toastr ile hata mesajı göster\n        }\n      },\n      error: (error) => {\n        console.error('Login failed:', error);  // Hata mesajı\n        this.errorMessage = 'An error occurred during login';  // Hata mesajı\n        this.toastr.error(this.errorMessage); // Toastr ile hata mesajı göster\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}