{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let UserAddComponent = class UserAddComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.errorMessage = null;\n    this.availableRoles = ['Admin', 'Client']; // Mevcut roller\n    this.selectedRoles = []; // Seçilen roller\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\',.<>?/]).*')]],\n      confirmPassword: ['', Validators.required],\n      roles: [[]] // Roller için form alanı\n    });\n  }\n\n  onRoleSelect(event) {\n    const selectedOptions = Array.from(event.target.selectedOptions).map(option => option.value);\n    this.registerForm.patchValue({\n      roles: selectedOptions\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('UserName', this.registerForm.get('userName')?.value);\n    formData.append('Email', this.registerForm.get('email')?.value);\n    formData.append('Name', this.registerForm.get('name')?.value);\n    formData.append('Surname', this.registerForm.get('surname')?.value);\n    formData.append('BirthDate', new Date(this.registerForm.get('birthDate')?.value).toISOString());\n    formData.append('Password', this.registerForm.get('password')?.value);\n    formData.append('ConfirmPassword', this.registerForm.get('confirmPassword')?.value);\n    // Rolleri JSON formatında ekleme\n    formData.append('Roles', JSON.stringify(this.registerForm.get('roles')?.value));\n    this.accountService.register(formData).subscribe({\n      next: response => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['account/login']);\n      },\n      error: error => {\n        console.error('Registration failed:', error);\n      }\n    });\n  }\n};\nUserAddComponent = __decorate([Component({\n  selector: 'app-user-add',\n  templateUrl: './user-add.component.html',\n  styleUrls: ['./user-add.component.scss']\n})], UserAddComponent);","map":{"version":3,"names":["Component","UserAddComponent","constructor","fb","accountService","router","errorMessage","availableRoles","selectedRoles","registerForm","group","userName","Validators","required","email","name","surname","birthDate","password","minLength","pattern","confirmPassword","roles","onRoleSelect","event","selectedOptions","Array","from","target","map","option","value","patchValue","onSubmit","invalid","console","error","formData","FormData","append","get","Date","toISOString","JSON","stringify","register","subscribe","next","response","log","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\user\\user-add\\user-add.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-add',\n  templateUrl: './user-add.component.html',\n  styleUrls: ['./user-add.component.scss']\n})\nexport class UserAddComponent {\n  registerForm: FormGroup;\n  errorMessage: string | null = null;\n  availableRoles = ['Admin', 'Client']; // Mevcut roller\n  selectedRoles: string[] = []; // Seçilen roller\n\n  constructor( private fb: FormBuilder,\n    private accountService: AccountService,\n    private router: Router\n  ) {\n    this.registerForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      surname: ['', Validators.required],\n      birthDate: ['', Validators.required],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*()_+}{\":;\\',.<>?/]).*'),\n        ],\n      ],\n      confirmPassword: ['', Validators.required],\n      roles: [[]], // Roller için form alanı\n    });\n  }\n\n  onRoleSelect(event: any): void {\n    const selectedOptions = Array.from(event.target.selectedOptions).map(\n      (option: any) => option.value\n    );\n    this.registerForm.patchValue({ roles: selectedOptions });\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.invalid) {\n      console.error('Form is invalid');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('UserName', this.registerForm.get('userName')?.value);\n    formData.append('Email', this.registerForm.get('email')?.value);\n    formData.append('Name', this.registerForm.get('name')?.value);\n    formData.append('Surname', this.registerForm.get('surname')?.value);\n    formData.append(\n      'BirthDate',\n      new Date(this.registerForm.get('birthDate')?.value).toISOString()\n    );\n    formData.append('Password', this.registerForm.get('password')?.value);\n    formData.append('ConfirmPassword', this.registerForm.get('confirmPassword')?.value);\n\n    // Rolleri JSON formatında ekleme\n    formData.append('Roles', JSON.stringify(this.registerForm.get('roles')?.value));\n\n    this.accountService.register(formData).subscribe({\n      next: (response) => {\n        console.log('Registration successful:', response);\n        this.router.navigate(['account/login']);\n      },\n      error: (error) => {\n        console.error('Registration failed:', error);\n      },\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}