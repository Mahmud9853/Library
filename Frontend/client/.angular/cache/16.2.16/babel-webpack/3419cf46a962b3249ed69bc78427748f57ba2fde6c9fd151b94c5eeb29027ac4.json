{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BookListComponent = class BookListComponent {\n  constructor(bookService, fb) {\n    this.bookService = bookService;\n    this.fb = fb;\n    this.books = [];\n    this.totalRecords = 0;\n    this.categories = [];\n    this.types = [];\n    this.authors = [];\n    // Initialize the reactive form with default values\n    this.searchForm = this.fb.group({\n      search: [''],\n      typeId: [''],\n      categoryId: [''],\n      authorId: [''],\n      pageNumber: [1],\n      pageSize: [10]\n    });\n  }\n  ngOnInit() {\n    this.getFilters();\n    this.getBooks();\n  }\n  getBooks() {\n    const params = this.searchForm.value; // Get current form values as parameters\n    this.bookService.getBooks(params).subscribe(response => {\n      this.books = response.books.$values; // Assign fetched books to the books array\n      this.totalRecords = response.totalRecords; // Update total records for pagination\n    });\n  }\n  // Fetch filter data (categories, types, authors) from the API using the service\n  getFilters() {\n    this.bookService.getCategories().subscribe(data => this.categories = data);\n    this.bookService.getTypes().subscribe(data => this.types = data);\n    this.bookService.getAuthors().subscribe(data => this.authors = data);\n  }\n  // Handle page change for pagination\n  onPageChange(page) {\n    this.searchForm.patchValue({\n      pageNumber: page\n    }); // Update the current page number\n    this.getBooks(); // Fetch books for the new page\n  }\n  // Handle form submission for search and filter\n  onSearch() {\n    this.searchForm.patchValue({\n      pageNumber: 1\n    }); // Reset to the first page on new search\n    this.getBooks(); // Fetch books with updated search and filter values\n  }\n};\n\nBookListComponent = __decorate([Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.scss']\n})], BookListComponent);","map":{"version":3,"names":["Component","BookListComponent","constructor","bookService","fb","books","totalRecords","categories","types","authors","searchForm","group","search","typeId","categoryId","authorId","pageNumber","pageSize","ngOnInit","getFilters","getBooks","params","value","subscribe","response","$values","getCategories","data","getTypes","getAuthors","onPageChange","page","patchValue","onSearch","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\admin\\book\\book-list\\book-list.component.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport {Book} from 'src/app/shared/models/book'; \nimport { BookService } from '../book.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { BookParams } from 'src/app/shared/models/bookParams';\nimport { TypeService } from '../../type/type.service';\nimport { AuthorService } from '../../author/author.service';\nimport { Author } from 'src/app/shared/models/author';\nimport { Category } from 'src/app/shared/models/category';\nimport { Type } from 'src/app/shared/models/type';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n@Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.scss']\n})\nexport class BookListComponent implements OnInit{\n\n  books: any[] = []; \n  totalRecords: number = 0;\n  categories: any[] = [];\n  types: any[] = []; \n  authors: any[] = []; \n  searchForm: FormGroup;\n\n  constructor(private bookService: BookService, private fb: FormBuilder) {\n    // Initialize the reactive form with default values\n    this.searchForm = this.fb.group({\n      search: [''],\n      typeId: [''],\n      categoryId: [''],\n      authorId: [''],\n      pageNumber: [1],\n      pageSize: [10]\n    });\n  }\n  \n  ngOnInit(): void {\n    this.getFilters(); \n    this.getBooks(); \n  }\n\n  getBooks(): void {\n    const params = this.searchForm.value; // Get current form values as parameters\n    this.bookService.getBooks(params).subscribe(response => {\n      this.books = response.books.$values; // Assign fetched books to the books array\n      this.totalRecords = response.totalRecords; // Update total records for pagination\n    });\n  }\n\n  // Fetch filter data (categories, types, authors) from the API using the service\n  getFilters(): void {\n    this.bookService.getCategories().subscribe(data => this.categories = data);\n    this.bookService.getTypes().subscribe(data => this.types = data);\n    this.bookService.getAuthors().subscribe(data => this.authors = data);\n  }\n\n  // Handle page change for pagination\n  onPageChange(page: number): void {\n    this.searchForm.patchValue({ pageNumber: page }); // Update the current page number\n    this.getBooks(); // Fetch books for the new page\n  }\n\n  // Handle form submission for search and filter\n  onSearch(): void {\n    this.searchForm.patchValue({ pageNumber: 1 }); // Reset to the first page on new search\n    this.getBooks(); // Fetch books with updated search and filter values\n  }\n   \n    // getTypes(): void {\n    //   this.typeService.getTypes().subscribe((types) => (this.types = types));\n    // }\n    // getAuthors(): void {\n    //   this.authorService.getAuthors().subscribe((authors) => (this.authors = authors));\n    // }\n\n  // onSearch(search: string): void {\n    //   this.bookParams.search = search;\n    //   this.bookParams.pageNumber = 1;\n    //   this.getBooks();\n    // }\n\n    // applyFilters(): void {\n    //   this.bookParams.pageNumber = 1;\n    //   this.getBooks();\n    // }\n    // changePage(pageNumber: number) : void {\n    //   if(pageNumber > 0){\n    //     this.bookParams.pageNumber = pageNumber;\n    //     this.getBooks();\n    //   }\n    // }\n    // getBooks(): void { isleyir\n    //   this.bookService.getBooks(this.bookParams).subscribe({\n    //    next: (response: any) => {\n    //       console.log('API Response:', response);\n    //         this.books = response;\n    //         this.totalRecords = response.totalCount || 0;\n    //     },\n    //       error: error => console.log('Error fetching books:', error)\n    //     })\n    // }\n    \n  \n \n  \n  \n  \n \n  }\n"],"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAgBzC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAS5BC,YAAoBC,WAAwB,EAAUC,EAAe;IAAjD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,EAAE,GAAFA,EAAE;IAPxD,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,YAAY,GAAW,CAAC;IACxB,KAAAC,UAAU,GAAU,EAAE;IACtB,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,OAAO,GAAU,EAAE;IAIjB;IACA,IAAI,CAACC,UAAU,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC9BC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,UAAU,EAAE,CAAC,EAAE,CAAC;MAChBC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,UAAU,EAAE,CAAC,CAAC,CAAC;MACfC,QAAQ,EAAE,CAAC,EAAE;KACd,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,IAAI,CAACX,UAAU,CAACY,KAAK,CAAC,CAAC;IACtC,IAAI,CAACnB,WAAW,CAACiB,QAAQ,CAACC,MAAM,CAAC,CAACE,SAAS,CAACC,QAAQ,IAAG;MACrD,IAAI,CAACnB,KAAK,GAAGmB,QAAQ,CAACnB,KAAK,CAACoB,OAAO,CAAC,CAAC;MACrC,IAAI,CAACnB,YAAY,GAAGkB,QAAQ,CAAClB,YAAY,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEA;EACAa,UAAUA,CAAA;IACR,IAAI,CAAChB,WAAW,CAACuB,aAAa,EAAE,CAACH,SAAS,CAACI,IAAI,IAAI,IAAI,CAACpB,UAAU,GAAGoB,IAAI,CAAC;IAC1E,IAAI,CAACxB,WAAW,CAACyB,QAAQ,EAAE,CAACL,SAAS,CAACI,IAAI,IAAI,IAAI,CAACnB,KAAK,GAAGmB,IAAI,CAAC;IAChE,IAAI,CAACxB,WAAW,CAAC0B,UAAU,EAAE,CAACN,SAAS,CAACI,IAAI,IAAI,IAAI,CAAClB,OAAO,GAAGkB,IAAI,CAAC;EACtE;EAEA;EACAG,YAAYA,CAACC,IAAY;IACvB,IAAI,CAACrB,UAAU,CAACsB,UAAU,CAAC;MAAEhB,UAAU,EAAEe;IAAI,CAAE,CAAC,CAAC,CAAC;IAClD,IAAI,CAACX,QAAQ,EAAE,CAAC,CAAC;EACnB;EAEA;EACAa,QAAQA,CAAA;IACN,IAAI,CAACvB,UAAU,CAACsB,UAAU,CAAC;MAAEhB,UAAU,EAAE;IAAC,CAAE,CAAC,CAAC,CAAC;IAC/C,IAAI,CAACI,QAAQ,EAAE,CAAC,CAAC;EACnB;CA0CC;;AA7FUnB,iBAAiB,GAAAiC,UAAA,EAL7BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWpC,iBAAiB,CA6F3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}