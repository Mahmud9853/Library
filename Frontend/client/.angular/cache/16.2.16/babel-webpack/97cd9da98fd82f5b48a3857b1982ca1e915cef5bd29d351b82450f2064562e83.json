{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetpasswordComponent_p_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.message);\n  }\n}\nexport class ResetpasswordComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n    this.message = '';\n    this.resetPasswordForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      // token: ['', Validators.required],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    if (this.resetPasswordForm.valid) {\n      const formData = new FormData();\n      formData.append('email', this.resetPasswordForm.get('email')?.value);\n      // formData.append('token', this.resetPasswordForm.get('token')?.value);\n      formData.append('newPassword', this.resetPasswordForm.get('newPassword')?.value);\n      this.accountService.resetPassword(formData).subscribe({\n        next: response => {\n          this.message = response.message;\n          this.router.navigate(['account/login']);\n        },\n        error: error => {\n          this.message = error.error.message || 'Error occured.';\n        }\n      });\n    }\n  }\n  static {\n    this.ɵfac = function ResetpasswordComponent_Factory(t) {\n      return new (t || ResetpasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetpasswordComponent,\n      selectors: [[\"app-resetpassword\"]],\n      decls: 17,\n      vars: 3,\n      consts: [[1, \"container\"], [1, \"row\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"my-2\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", \"w-50\"], [\"for\", \"newPassword\"], [\"type\", \"password\", \"id\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", \"w-50\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [4, \"ngIf\"]],\n      template: function ResetpasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtext(2, \" .col-md- \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"h2\");\n          i0.ɵɵtext(4, \"Parolu yenil\\u0259\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function ResetpasswordComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(6, \"div\", 3)(7, \"label\", 4);\n          i0.ɵɵtext(8, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\", 6);\n          i0.ɵɵtext(12, \"New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"button\", 8);\n          i0.ɵɵtext(15, \"Reset Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(16, ResetpasswordComponent_p_16_Template, 2, 1, \"p\", 9);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"disabled\", ctx.resetPasswordForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.message);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","message","ResetpasswordComponent","constructor","fb","accountService","router","resetPasswordForm","group","email","required","newPassword","minLength","onSubmit","valid","formData","FormData","append","get","value","resetPassword","subscribe","next","response","navigate","error","ɵɵdirectiveInject","i1","FormBuilder","i2","AccountService","i3","Router","selectors","decls","vars","consts","template","ResetpasswordComponent_Template","rf","ctx","ɵɵlistener","ResetpasswordComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵtemplate","ResetpasswordComponent_p_16_Template","ɵɵproperty","invalid"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.ts","D:\\MMU\\Frontend\\client\\src\\app\\account\\resetpassword\\resetpassword.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.scss']\n})\nexport class ResetpasswordComponent {\n  resetPasswordForm: FormGroup;\n  message: string = '';\n\n  constructor(private fb: FormBuilder, private accountService: AccountService, private router:Router ){\n    this.resetPasswordForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      // token: ['', Validators.required],\n      newPassword: ['',[Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit() {\n    if(this.resetPasswordForm.valid){\n      const formData = new FormData();\n      formData.append('email', this.resetPasswordForm.get('email')?.value);\n      // formData.append('token', this.resetPasswordForm.get('token')?.value);\n      formData.append('newPassword', this.resetPasswordForm.get('newPassword')?.value);\n      this.accountService.resetPassword(formData).subscribe({\n        next: (response) =>{\n          this.message = response.message;\n          this.router.navigate(['account/login']);\n        },\n        error: (error) =>{\n          this.message = error.error.message || 'Error occured.';\n        }\n      });\n    }\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        .col-md-\n    </div>\n    <h2>Parolu yenilə</h2>\n    <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group my-2\">\n            <label for=\"email\">Email</label>\n            <input class=\"form-control w-50\" type=\"email\" id=\"email\" formControlName=\"email\" />\n        </div>\n        \n        <div class=\"form-group my-2\">\n            <label for=\"newPassword\">New Password</label>\n            <input class=\"form-control w-50\" type=\"password\" id=\"newPassword\" formControlName=\"newPassword\" />\n        </div>\n        <button type=\"submit\" [disabled]=\"resetPasswordForm.invalid\" class=\"btn btn-primary\">Reset Password</button>\n        <p *ngIf=\"message\">{{message}}</p>\n    </form>\n</div>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICe3DC,EAAA,CAAAC,cAAA,QAAmB;IAAAD,EAAA,CAAAE,MAAA,GAAW;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAfH,EAAA,CAAAI,SAAA,GAAW;IAAXJ,EAAA,CAAAK,iBAAA,CAAAC,MAAA,CAAAC,OAAA,CAAW;;;ADNtC,OAAM,MAAOC,sBAAsB;EAIjCC,YAAoBC,EAAe,EAAUC,cAA8B,EAAUC,MAAa;IAA9E,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAF3F,KAAAL,OAAO,GAAW,EAAE;IAGlB,IAAI,CAACM,iBAAiB,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MACrCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACiB,QAAQ,EAAEjB,UAAU,CAACgB,KAAK,CAAC,CAAC;MACpD;MACAE,WAAW,EAAE,CAAC,EAAE,EAAC,CAAClB,UAAU,CAACiB,QAAQ,EAAEjB,UAAU,CAACmB,SAAS,CAAC,CAAC,CAAC,CAAC;KAChE,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAG,IAAI,CAACN,iBAAiB,CAACO,KAAK,EAAC;MAC9B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACV,iBAAiB,CAACW,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK,CAAC;MACpE;MACAJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACV,iBAAiB,CAACW,GAAG,CAAC,aAAa,CAAC,EAAEC,KAAK,CAAC;MAChF,IAAI,CAACd,cAAc,CAACe,aAAa,CAACL,QAAQ,CAAC,CAACM,SAAS,CAAC;QACpDC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACtB,OAAO,GAAGsB,QAAQ,CAACtB,OAAO;UAC/B,IAAI,CAACK,MAAM,CAACkB,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;QACzC,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAACxB,OAAO,GAAGwB,KAAK,CAACA,KAAK,CAACxB,OAAO,IAAI,gBAAgB;QACxD;OACD,CAAC;;EAEN;;;uBA5BWC,sBAAsB,EAAAR,EAAA,CAAAgC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAlC,EAAA,CAAAgC,iBAAA,CAAAG,EAAA,CAAAC,cAAA,GAAApC,EAAA,CAAAgC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;IAAA;EAAA;;;YAAtB9B,sBAAsB;MAAA+B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCVnC7C,EAAA,CAAAC,cAAA,aAAuB;UAEfD,EAAA,CAAAE,MAAA,iBACJ;UAAAF,EAAA,CAAAG,YAAA,EAAM;UACNH,EAAA,CAAAC,cAAA,SAAI;UAAAD,EAAA,CAAAE,MAAA,yBAAa;UAAAF,EAAA,CAAAG,YAAA,EAAK;UACtBH,EAAA,CAAAC,cAAA,cAA8D;UAAxBD,EAAA,CAAA+C,UAAA,sBAAAC,yDAAA;YAAA,OAAYF,GAAA,CAAA3B,QAAA,EAAU;UAAA,EAAC;UACzDnB,EAAA,CAAAC,cAAA,aAA6B;UACND,EAAA,CAAAE,MAAA,YAAK;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAChCH,EAAA,CAAAiD,SAAA,eAAmF;UACvFjD,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,cAA6B;UACAD,EAAA,CAAAE,MAAA,oBAAY;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAC7CH,EAAA,CAAAiD,SAAA,gBAAkG;UACtGjD,EAAA,CAAAG,YAAA,EAAM;UACNH,EAAA,CAAAC,cAAA,iBAAqF;UAAAD,EAAA,CAAAE,MAAA,sBAAc;UAAAF,EAAA,CAAAG,YAAA,EAAS;UAC5GH,EAAA,CAAAkD,UAAA,KAAAC,oCAAA,eAAkC;UACtCnD,EAAA,CAAAG,YAAA,EAAO;;;UAZDH,EAAA,CAAAI,SAAA,GAA+B;UAA/BJ,EAAA,CAAAoD,UAAA,cAAAN,GAAA,CAAAjC,iBAAA,CAA+B;UAUXb,EAAA,CAAAI,SAAA,GAAsC;UAAtCJ,EAAA,CAAAoD,UAAA,aAAAN,GAAA,CAAAjC,iBAAA,CAAAwC,OAAA,CAAsC;UACxDrD,EAAA,CAAAI,SAAA,GAAa;UAAbJ,EAAA,CAAAoD,UAAA,SAAAN,GAAA,CAAAvC,OAAA,CAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}