{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/account/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const isLoggedIn = this.accountService.isLoggedIn();\n    const validRoutes = ['/home', '/admin/dashboard', '/account/login', '/account/register'];\n    if (!isLoggedIn) {\n      // Kullanıcı giriş yapmamışsa ve geçersiz bir rota girmişse\n      if (!validRoutes.includes(state.url)) {\n        this.router.navigate(['/account/login']);\n        return false;\n      }\n    } else {\n      // Kullanıcı giriş yapmışsa ve geçersiz bir rota girmişse\n      if (!validRoutes.includes(state.url)) {\n        this.router.navigate(['/home']);\n        return false;\n      }\n    }\n    return true; // Eğer giriş durumu ve rota geçerliyse erişime izin ver\n  }\n  // Hatalı rota kontrolü\n  isInvalidRoute(url) {\n    const validRoutes = ['/home', '/account/login', '/account/register', '/admin/dashboard'];\n    return !validRoutes.includes(url); // Eğer URL geçerli rotalarda yoksa true döner\n  }\n\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","accountService","router","canActivate","next","state","isLoggedIn","validRoutes","includes","url","navigate","isInvalidRoute","i0","ɵɵinject","i1","AccountService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AccountService } from 'src/app/account/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private accountService: AccountService, private router: Router) { }\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const isLoggedIn = this.accountService.isLoggedIn();\n    const validRoutes = ['/home', '/admin/dashboard', '/account/login', '/account/register'];\n  \n    if (!isLoggedIn) {\n      // Kullanıcı giriş yapmamışsa ve geçersiz bir rota girmişse\n      if (!validRoutes.includes(state.url)) {\n        this.router.navigate(['/account/login']);\n        return false;\n      }\n    } else {\n      // Kullanıcı giriş yapmışsa ve geçersiz bir rota girmişse\n      if (!validRoutes.includes(state.url)) {\n        this.router.navigate(['/home']);\n        return false;\n      }\n    }\n  \n    return true; // Eğer giriş durumu ve rota geçerliyse erişime izin ver\n  }\n  \n  \n  // Hatalı rota kontrolü\n  private isInvalidRoute(url: string): boolean {\n    const validRoutes = ['/home', '/account/login', '/account/register', '/admin/dashboard'];\n    return !validRoutes.includes(url); // Eğer URL geçerli rotalarda yoksa true döner\n  }\n  \n  \n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAY;EAC9EC,WAAWA,CAACC,IAA4B,EAAEC,KAA0B;IAClE,MAAMC,UAAU,GAAG,IAAI,CAACL,cAAc,CAACK,UAAU,EAAE;IACnD,MAAMC,WAAW,GAAG,CAAC,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,mBAAmB,CAAC;IAExF,IAAI,CAACD,UAAU,EAAE;MACf;MACA,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACH,KAAK,CAACI,GAAG,CAAC,EAAE;QACpC,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;QACxC,OAAO,KAAK;;KAEf,MAAM;MACL;MACA,IAAI,CAACH,WAAW,CAACC,QAAQ,CAACH,KAAK,CAACI,GAAG,CAAC,EAAE;QACpC,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,KAAK;;;IAIhB,OAAO,IAAI,CAAC,CAAC;EACf;EAGA;EACQC,cAAcA,CAACF,GAAW;IAChC,MAAMF,WAAW,GAAG,CAAC,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC;IACxF,OAAO,CAACA,WAAW,CAACC,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAC;EACrC;;;;uBA7BWV,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATlB,SAAS;MAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}