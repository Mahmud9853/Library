{"ast":null,"code":"import { ReplaySubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.baseUrl = environment.apiUrl;\n      this.currentUserSource = new ReplaySubject(1);\n      this.currentUser$ = this.currentUserSource.asObservable();\n      this.role = null;\n    }\n    register(userData) {\n      return this.http.post(`${this.baseUrl}Account/register`, userData);\n    }\n    // login(userData: any): Observable<any> {\n    //   return this.http.post(`${this.baseUrl}Account/login`, userData);\n    // }\n    // login(loginData: { userName: string, password: string }): Observable<any> {\n    //   return this.http.post(`${this.baseUrl}Account/login`, loginData);\n    // }\n    login(loginData) {\n      return this.http.post(`${this.baseUrl}Account/login`, loginData).pipe(tap(response => {\n        if (response && response.userName) {\n          localStorage.setItem('username', response.userName); // Kullanıcı adı localStorage'a kaydediliyor\n        }\n\n        if (response && response.role) {\n          localStorage.setItem('role', response.role); // Save the role to localStorage\n        }\n      }));\n    }\n\n    resetPassword(formData) {\n      return this.http.post(`${this.baseUrl}Account/resetpassword`, formData, {\n        responseType: 'text'\n      });\n    }\n    // Token ve Role'ü localStorage'da saklamak için yardımcı metodlar\n    saveToken(token) {\n      localStorage.setItem('token', token);\n    }\n    setRole(role) {\n      localStorage.setItem('role', role);\n    }\n    // Kullanıcının login olup olmadığını kontrol etme\n    isLoggedIn() {\n      return !!localStorage.getItem('token');\n    }\n    // Token'ı almak\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    // Rolü almak\n    getRole() {\n      const token = localStorage.getItem('token'); // JWT varsa al\n      if (!token) return null;\n      const payload = JSON.parse(atob(token.split('.')[1])); // JWT payload\n      return payload.role || null; // Rolü döndür\n    }\n\n    getCurrentUser() {\n      return this.currentUser$; // Mevcut kullanıcı\n    }\n    // Çıkış yapma\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('role');\n      this.router.navigate(['/account/login']);\n    }\n    static {\n      this.ɵfac = function AccountService_Factory(t) {\n        return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AccountService,\n        factory: AccountService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}