{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n  }\n  // loadCurrentUser(token: string | null){\n  //   if (token === null) {\n  //     this.currentUserSource.next(null);\n  //     return of(null);\n  //   }\n  //   let headers = new HttpHeaders();\n  //   headers = headers.set('Authorization', `Bearer ${token}`);\n  //   return this.http.get<User>(this.baseUrl + 'Account', {headers}).pipe(\n  //     map(user => {\n  //       if (user) {\n  //         localStorage.setItem('token', user.token);\n  //         this.currentUserSource.next(user);\n  //         return user;\n  //       }else{\n  //         return null\n  //       }\n  //     })\n  //   )\n  // }\n  login(values) {\n    return this.http.post(this.baseUrl + 'Account/login', values).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.currentUserSource.next(user);\n    }));\n  }\n  register(values) {\n    return this.http.post(this.baseUrl + 'Account/register', values).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.currentUserSource.next(user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSource.next(null);\n    this.router.navigateByUrl('/');\n  }\n  checkEmailExists(email) {\n    return this.http.get(this.baseUrl + 'Account/emailExists?email=' + email);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ReplaySubject","map","environment","AccountService","constructor","http","router","baseUrl","apiUrl","currentUserSource","currentUser$","asObservable","login","values","post","pipe","user","localStorage","setItem","token","next","register","logout","removeItem","navigateByUrl","checkEmailExists","email","get","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\MMU\\Frontend\\client\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ReplaySubject, map, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { User } from '../shared/models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new ReplaySubject<User | null>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  // loadCurrentUser(token: string | null){\n  //   if (token === null) {\n  //     this.currentUserSource.next(null);\n  //     return of(null);\n  //   }\n\n  //   let headers = new HttpHeaders();\n  //   headers = headers.set('Authorization', `Bearer ${token}`);\n\n  //   return this.http.get<User>(this.baseUrl + 'Account', {headers}).pipe(\n  //     map(user => {\n  //       if (user) {\n  //         localStorage.setItem('token', user.token);\n  //         this.currentUserSource.next(user);\n  //         return user;\n  //       }else{\n  //         return null\n  //       }\n  //     })\n  //   )\n  // }\n\n  login(values: any) {\n    return this.http.post<User>(this.baseUrl + 'Account/login', values).pipe(\n      map(user => {\n        localStorage.setItem('token', user.token);\n        this.currentUserSource.next(user);\n        \n      })\n    )\n  }\n\n  register(values: any) {\n    return this.http.post<User>(this.baseUrl + 'Account/register', values).pipe(\n      map(user => {\n        localStorage.setItem('token', user.token);\n        this.currentUserSource.next(user);\n      })\n    )\n  }\n\n  logout(){\n    localStorage.removeItem('token');\n    this.currentUserSource.next(null);\n    this.router.navigateByUrl('/');\n  }\n  checkEmailExists(email: string){\n    return this.http.get<boolean>(this.baseUrl + 'Account/emailExists?email=' + email);\n  }\n\n  \n\n \n}\n"],"mappings":"AACA,SAASA,aAAa,EAAEC,GAAG,QAAY,MAAM;AAC7C,SAASC,WAAW,QAAQ,8BAA8B;;;;AAQ1D,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJpD,KAAAC,OAAO,GAAGL,WAAW,CAACM,MAAM;IACpB,KAAAC,iBAAiB,GAAG,IAAIT,aAAa,CAAc,CAAC,CAAC;IAC7D,KAAAU,YAAY,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;EAEY;EAEhE;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,KAAKA,CAACC,MAAW;IACf,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,IAAI,CAACP,OAAO,GAAG,eAAe,EAAEM,MAAM,CAAC,CAACE,IAAI,CACtEd,GAAG,CAACe,IAAI,IAAG;MACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;MACzC,IAAI,CAACV,iBAAiB,CAACW,IAAI,CAACJ,IAAI,CAAC;IAEnC,CAAC,CAAC,CACH;EACH;EAEAK,QAAQA,CAACR,MAAW;IAClB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,IAAI,CAACP,OAAO,GAAG,kBAAkB,EAAEM,MAAM,CAAC,CAACE,IAAI,CACzEd,GAAG,CAACe,IAAI,IAAG;MACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;MACzC,IAAI,CAACV,iBAAiB,CAACW,IAAI,CAACJ,IAAI,CAAC;IACnC,CAAC,CAAC,CACH;EACH;EAEAM,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACd,iBAAiB,CAACW,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI,CAACd,MAAM,CAACkB,aAAa,CAAC,GAAG,CAAC;EAChC;EACAC,gBAAgBA,CAACC,KAAa;IAC5B,OAAO,IAAI,CAACrB,IAAI,CAACsB,GAAG,CAAU,IAAI,CAACpB,OAAO,GAAG,4BAA4B,GAAGmB,KAAK,CAAC;EACpF;;;uBAxDWvB,cAAc,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAd9B,cAAc;MAAA+B,OAAA,EAAd/B,cAAc,CAAAgC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}